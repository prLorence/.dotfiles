-- local dap = require('dap')
-- local dapui = require('dapui')
--
-- local find_startup = function()
--     local file = assert(io.popen('findstartup_cs.sh', 'r'))
--     local output = file:read('*all')
--     file:close()
--     local dir = output:gsub('\n$', '') -- Trim the trailing newline
--     if dir ~= '' then
--         return dir
--     end
--     return nil
-- end
--
-- local startup_path = find_startup()
--
-- dap.adapters.coreclr = {
--     type = 'executable',
--     command = '/home/phetoush/Documents/github_repos/tools/netcoredbg/netcoredbg',
--     args = { '--interpreter=vscode' }
-- }
--
-- vim.g.dotnet_build_project = function()
--     local default_path = vim.fn.getcwd() .. '/'
--
--     if vim.g['dotnet_last_proj_path'] ~= nil then
--         default_path = vim.g['dotnet_last_proj_path']
--     end
--
--     local path = startup_path ~= nil or vim.fn.input('Path to your *proj file', default_path, 'file')
--
--     vim.g['dotnet_last_proj_path'] = path
--
--     local cmd = 'dotnet build -c Debug ' .. path .. ' > /dev/null'
--     print('')
--     print('Cmd to execute: ' .. cmd)
--     local f = os.execute(cmd)
--     if f == 0 then
--         print('\nBuild: ✔️ ')
--     else
--         print('\nBuild: ❌ (code: ' .. f .. ')')
--     end
-- end
--
-- vim.g.dotnet_get_dll_path = function()
--     local startup_dll = startup_path == nil or
--         assert((startup_path .. '/bin/Debug/net7.0/' .. startup_path:match(".*/([^/]+)") .. ".dll"))
--
--     local request = function()
--         return vim.fn.input('Path to dll', vim.fn.getcwd() .. '/bin/Debug/', 'file')
--     end
--
--     if vim.g['dotnet_last_dll_path'] == nil then
--         vim.g['dotnet_last_dll_path'] = startup_dll or request()
--     else
--         if vim.fn.confirm('Do you want to change the path to dll?\n' .. vim.g['dotnet_last_dll_path'], '&yes\n&no', 2) == 1 then
--             vim.g['dotnet_last_dll_path'] = startup_dll or request()
--         end
--     end
--
--     return vim.g['dotnet_last_dll_path']
-- end
--
-- local config = {
--     {
--         type = "coreclr",
--         name = "launch - netcoredbg",
--         request = "launch",
--         program = function()
--             local has_startup_path = startup_path ~= nil or ''
--             local project_info = has_startup_path and ("Found startup project: " .. startup_path .. " build?")
--                 or "Rebuild project?"
--
--             if vim.fn.confirm(project_info, '&yes\n&no', 2) == 1 then
--                 vim.g.dotnet_build_project()
--             end
--
--             return vim.g.dotnet_get_dll_path()
--         end,
--     },
-- }
--
-- dap.configurations.cs = config
-- dap.configurations.fsharp = config
--
-- vim.api.nvim_set_keymap('n', '<F5>', '<cmd>lua require"dap".continue()<CR>', {})
--
-- dapui.setup()
--
-- dap.listeners.after.event_initialized["dapui_config"] = function()
--     dapui.open()
-- end
-- dap.listeners.before.event_terminated["dapui_config"] = function()
--     dapui.close()
-- end
-- dap.listeners.before.event_exited["dapui_config"] = function()
--     dapui.close()
-- end
