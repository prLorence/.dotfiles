exports.default=function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(n(1)),l=i(n(4)),s=n(5);t.default=function(){return{plugin:e=>e.use(r.default,s.MAKRDOWN_IT_ATTRS_CONFIG).use(l.default),assets:function(){return[{name:"webview/index.js"},{name:"webview/style.css"}]}}}},function(e,t,n){"use strict";const i=n(2),r={leftDelimiter:"{",rightDelimiter:"}",allowedAttributes:[]};function l(e,t,n){let i={match:!1,j:null},r=void 0!==n.shift?t+n.shift:n.position,a=(f=e,(h=r)>=0?f[h]:f[f.length+h]);var f,h;if(void 0===a)return i;for(let e in n)if("shift"!==e&&"position"!==e){if(void 0===a[e])return i;if("children"===e&&s(n.children)){if(0===a.children.length)return i;let e,t=n.children,r=a.children;if(t.every(e=>void 0!==e.position)){if(e=t.every(e=>l(r,e.position,e).match),e){let e=c(t).position;i.j=e>=0?e:r.length+e}}else for(let n=0;n<r.length;n++)if(e=t.every(e=>l(r,n,e).match),e){i.j=n;break}if(!1===e)return i}else switch(typeof n[e]){case"boolean":case"number":case"string":if(a[e]!==n[e])return i;break;case"function":if(!n[e](a[e]))return i;break;case"object":if(o(n[e])){if(!1===n[e].every(t=>t(a[e])))return i;break}default:throw new Error(`Unknown type of pattern test (key: ${e}). Test should be of type boolean, number, string, function or array of functions.`)}}return i.match=!0,i}function s(e){return Array.isArray(e)&&e.length&&e.every(e=>"object"==typeof e)}function o(e){return Array.isArray(e)&&e.length&&e.every(e=>"function"==typeof e)}function c(e){return e.slice(-1)[0]||{}}e.exports=function(e,t){let n=Object.assign({},r);n=Object.assign(n,t);const s=i(n);e.core.ruler.before("linkify","curly_attributes",(function(e){let t=e.tokens;for(let e=0;e<t.length;e++)for(let n=0;n<s.length;n++){let i=s[n],r=null;i.tests.every(n=>{let i=l(t,e,n);return null!==i.j&&(r=i.j),i.match})&&(i.transform(t,e,r),"inline attributes"!==i.name&&"inline nesting 0"!==i.name||n--)}}))}},function(e,t,n){"use strict";const i=n(3);function r(e){return e.slice(-1)[0]}e.exports=e=>{const t=new RegExp("^ {0,3}[-*_]{3,} ?"+i.escapeRegExp(e.leftDelimiter)+"[^"+i.escapeRegExp(e.rightDelimiter)+"]");return[{name:"fenced code blocks",tests:[{shift:0,block:!0,info:i.hasDelimiters("end",e)}],transform:(t,n)=>{let r=t[n],l=r.info.lastIndexOf(e.leftDelimiter),s=i.getAttrs(r.info,l,e);i.addAttrs(s,r),r.info=i.removeDelimiter(r.info,e)}},{name:"inline nesting 0",tests:[{shift:0,type:"inline",children:[{shift:-1,type:e=>"image"===e||"code_inline"===e},{shift:0,type:"text",content:i.hasDelimiters("start",e)}]}],transform:(t,n,r)=>{let l=t[n].children[r],s=l.content.indexOf(e.rightDelimiter),o=t[n].children[r-1],c=i.getAttrs(l.content,0,e);i.addAttrs(c,o),l.content.length===s+e.rightDelimiter.length?t[n].children.splice(r,1):l.content=l.content.slice(s+e.rightDelimiter.length)}},{name:"tables",tests:[{shift:0,type:"table_close"},{shift:1,type:"paragraph_open"},{shift:2,type:"inline",content:i.hasDelimiters("only",e)}],transform:(t,n)=>{let r=t[n+2],l=i.getMatchingOpeningToken(t,n),s=i.getAttrs(r.content,0,e);i.addAttrs(s,l),t.splice(n+1,3)}},{name:"inline attributes",tests:[{shift:0,type:"inline",children:[{shift:-1,nesting:-1},{shift:0,type:"text",content:i.hasDelimiters("start",e)}]}],transform:(t,n,r)=>{let l=t[n].children[r],s=l.content,o=i.getAttrs(s,0,e),c=i.getMatchingOpeningToken(t[n].children,r-1);i.addAttrs(o,c),l.content=s.slice(s.indexOf(e.rightDelimiter)+e.rightDelimiter.length)}},{name:"list softbreak",tests:[{shift:-2,type:"list_item_open"},{shift:0,type:"inline",children:[{position:-2,type:"softbreak"},{position:-1,type:"text",content:i.hasDelimiters("only",e)}]}],transform:(t,n,r)=>{let l=t[n].children[r].content,s=i.getAttrs(l,0,e),o=n-2;for(;t[o-1]&&"ordered_list_open"!==t[o-1].type&&"bullet_list_open"!==t[o-1].type;)o--;i.addAttrs(s,t[o-1]),t[n].children=t[n].children.slice(0,-2)}},{name:"list double softbreak",tests:[{shift:0,type:e=>"bullet_list_close"===e||"ordered_list_close"===e},{shift:1,type:"paragraph_open"},{shift:2,type:"inline",content:i.hasDelimiters("only",e),children:e=>1===e.length},{shift:3,type:"paragraph_close"}],transform:(t,n)=>{let r=t[n+2].content,l=i.getAttrs(r,0,e),s=i.getMatchingOpeningToken(t,n);i.addAttrs(l,s),t.splice(n+1,3)}},{name:"list item end",tests:[{shift:-2,type:"list_item_open"},{shift:0,type:"inline",children:[{position:-1,type:"text",content:i.hasDelimiters("end",e)}]}],transform:(t,n,l)=>{let s=t[n].children[l],o=s.content,c=i.getAttrs(o,o.lastIndexOf(e.leftDelimiter),e);i.addAttrs(c,t[n-2]);let a=o.slice(0,o.lastIndexOf(e.leftDelimiter));s.content=" "!==r(a)?a:a.slice(0,-1)}},{name:"\n{.a} softbreak then curly in start",tests:[{shift:0,type:"inline",children:[{position:-2,type:"softbreak"},{position:-1,type:"text",content:i.hasDelimiters("only",e)}]}],transform:(t,n,r)=>{let l=t[n].children[r],s=i.getAttrs(l.content,0,e),o=n+1;for(;t[o+1]&&-1===t[o+1].nesting;)o++;let c=i.getMatchingOpeningToken(t,o);i.addAttrs(s,c),t[n].children=t[n].children.slice(0,-2)}},{name:"horizontal rule",tests:[{shift:0,type:"paragraph_open"},{shift:1,type:"inline",children:e=>1===e.length,content:e=>null!==e.match(t)},{shift:2,type:"paragraph_close"}],transform:(t,n)=>{let r=t[n];r.type="hr",r.tag="hr",r.nesting=0;let l=t[n+1].content,s=l.lastIndexOf(e.leftDelimiter);r.attrs=i.getAttrs(l,s,e),r.markup=l,t.splice(n+1,2)}},{name:"end of block",tests:[{shift:0,type:"inline",children:[{position:-1,content:i.hasDelimiters("end",e),type:e=>"code_inline"!==e&&"math_inline"!==e}]}],transform:(t,n,l)=>{let s=t[n].children[l],o=s.content,c=i.getAttrs(o,o.lastIndexOf(e.leftDelimiter),e),a=n+1;for(;t[a+1]&&-1===t[a+1].nesting;)a++;let f=i.getMatchingOpeningToken(t,a);i.addAttrs(c,f);let h=o.slice(0,o.lastIndexOf(e.leftDelimiter));s.content=" "!==r(h)?h:h.slice(0,-1)}}]}},function(e,t,n){"use strict";function i(e){return e.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&")}t.getAttrs=function(e,t,n){const i=/[^\t\n\f />"'=]/,r=[];let l="",s="",o=!0,c=!1;for(let a=t+n.leftDelimiter.length;a<e.length;a++){if(e.slice(a,a+n.rightDelimiter.length)===n.rightDelimiter){""!==l&&r.push([l,s]);break}let t=e.charAt(a);if("="===t&&o)o=!1;else if("."!==t||""!==l)if("#"!==t||""!==l)if('"'!==t||""!==s)if('"'===t&&c)c=!1;else if(" "!==t||c)o&&-1===t.search(i)||(o?l+=t:s+=t);else{if(""===l)continue;r.push([l,s]),l="",s="",o=!0}else c=!0;else l="id",o=!1;else"."===e.charAt(a+1)?(l="css-module",a+=1):l="class",o=!1}if(n.allowedAttributes&&n.allowedAttributes.length){let e=n.allowedAttributes;return r.filter((function(t){let n=t[0];return e.some((function(e){return n===e||e instanceof RegExp&&e.test(n)}))}))}return r},t.addAttrs=function(e,t){for(let n=0,i=e.length;n<i;++n){let i=e[n][0];"class"===i?t.attrJoin("class",e[n][1]):"css-module"===i?t.attrJoin("css-module",e[n][1]):t.attrPush(e[n])}return t},t.hasDelimiters=function(e,t){if(!e)throw new Error('Parameter `where` not passed. Should be "start", "middle", "end" or "only".');return function(n){let i,r,l,s,o=t.leftDelimiter.length+1+t.rightDelimiter.length;if(!n||"string"!=typeof n||n.length<o)return!1;let c=o-t.rightDelimiter.length;switch(e){case"start":l=n.slice(0,t.leftDelimiter.length),i=l===t.leftDelimiter?0:-1,r=-1===i?-1:n.indexOf(t.rightDelimiter,c),s=n.charAt(r+t.rightDelimiter.length),s&&-1!==t.rightDelimiter.indexOf(s)&&(r=-1);break;case"end":i=n.lastIndexOf(t.leftDelimiter),r=-1===i?-1:n.indexOf(t.rightDelimiter,i+c),r=r===n.length-t.rightDelimiter.length?r:-1;break;case"only":l=n.slice(0,t.leftDelimiter.length),i=l===t.leftDelimiter?0:-1,l=n.slice(n.length-t.rightDelimiter.length),r=l===t.rightDelimiter?n.length-t.rightDelimiter.length:-1}return-1!==i&&-1!==r&&function(e){let n="."===e.charAt(t.leftDelimiter.length),i="#"===e.charAt(t.leftDelimiter.length);return n||i?e.length>=o+1:e.length>=o}(n.substring(i,r+t.rightDelimiter.length))}},t.removeDelimiter=function(e,t){const n=i(t.leftDelimiter),r=i(t.rightDelimiter);let l=new RegExp("[ \\n]?"+n+"[^"+n+r+"]+"+r+"$"),s=e.search(l);return-1!==s?e.slice(0,s):e},t.escapeRegExp=i,t.getMatchingOpeningToken=function(e,t){if("softbreak"===e[t].type)return!1;if(0===e[t].nesting)return e[t];let n=e[t].level,i=e[t].type.replace("_close","_open");for(;t>=0;--t)if(e[t].type===i&&e[t].level===n)return e[t]};let r=/[&<>"]/,l=/[&<>"]/g,s={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;"};function o(e){return s[e]}t.escapeHtml=function(e){return r.test(e)?e.replace(l,o):e}},function(e,t,n){"use strict";e.exports=function(e){e.inline.ruler.push("bracketed-spans",(function(e){var t=e.posMax;if(91!==e.src.charCodeAt(e.pos))return!1;var n=e.pos+1,i=e.md.helpers.parseLinkLabel(e,e.pos,!0);if(i<0)return!1;var r=i+1;return r<t&&123===e.src.charCodeAt(r)&&(e.pos=n,e.posMax=i,e.push("span_open","span",1),e.md.inline.tokenize(e),e.push("span_close","span",-1),e.pos=r,e.posMax=t,!0)}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MAKRDOWN_IT_ATTRS_CONFIG=void 0,t.MAKRDOWN_IT_ATTRS_CONFIG={allowedAttributes:["id"]}}]).default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,