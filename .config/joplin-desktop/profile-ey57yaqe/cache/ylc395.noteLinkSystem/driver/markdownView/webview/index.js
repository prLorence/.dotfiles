!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=35)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CODE_MIRROR_SCRIPT_ID=e.MARKDOWN_SCRIPT_ID=e.FOOTNOTE_ITEM_CLASS_NAME=e.FOOTNOTE_ID_PREFIX=e.MAIN_MARK_CLASS_NAME=e.REFERRER_SEARCH_PATTERN_PLACEHOLDER=e.NOTE_SEARCH_PATTERN_PLACEHOLDER=e.URL_FOLD_ICON_SETTING=e.PREVIEWER_URL_BLACKLIST_LOCAL=e.PREVIEWER_URL_BLACKLIST_SETTING=e.URL_ICON_ENABLED_SETTING=e.EXTRA_SYNTAX_ENABLED_SETTING=e.PREVIEWER_HOVER_DELAY_SETTING=e.PREVIEWER_ENABLED_SETTING=e.QUICK_LINK_CREATE_NOTE_SETTING=e.QUICK_LINK_AFTER_COMPLETION_SETTING=e.QUICK_LINK_ELEMENTS_ENABLED_SETTING=e.QUICK_LINK_SHOW_PATH_SETTING=e.QUICK_LINK_SYMBOL_SETTING=e.REFERRER_IDENTIFIER_ENABLED_SETTING=e.REFERRER_PANEL_MENTION_TEXT_MAX_LENGTH=e.REFERRER_PANEL_REFERENCE_EXPAND_SETTING=e.REFERRER_PANEL_STYLESHEET_SETTING=e.REFERRER_PANEL_TITLE_SETTING=e.REFERRER_PANEL_ENABLED_SETTING=e.REFERRER_VIEW_REFERENCE_EXPAND_SETTING=e.REFERRER_AUTO_LIST_POSITION_SETTING=e.REFERRER_ELEMENT_MENTION_TEXT_MAX_LENGTH=e.REFERRER_ELEMENT_NUMBER_TYPE=e.REFERRER_ELEMENT_NUMBER_ENABLED=e.REFERRER_LIST_MENTION_TEXT_MAX_LENGTH=e.REFERRER_LIST_HEADING_SETTING=e.REFERRER_SEARCH_PATTERN_SETTING=e.QUICK_LINK_SEARCH_PATTERN_SETTING=void 0,e.QUICK_LINK_SEARCH_PATTERN_SETTING="QUICK_LINK_SEARCH_PATTERN_SETTING",e.REFERRER_SEARCH_PATTERN_SETTING="REFERRER_SEARCH_PATTERN_SETTING",e.REFERRER_LIST_HEADING_SETTING="REFERRER_LIST_HEADING_SETTING",e.REFERRER_LIST_MENTION_TEXT_MAX_LENGTH="REFERRER_LIST_MENTION_TEXT_MAX_LENGTH",e.REFERRER_ELEMENT_NUMBER_ENABLED="REFERRER_ELEMENT_NUMBER_ENABLED",e.REFERRER_ELEMENT_NUMBER_TYPE="REFERRER_ELEMENT_NUMBER_TYPE",e.REFERRER_ELEMENT_MENTION_TEXT_MAX_LENGTH="REFERRER_ELEMENT_MENTION_TEXT_MAX_LENGTH",e.REFERRER_AUTO_LIST_POSITION_SETTING="REFERRER_AUTO_LIST_POSITION_SETTING",e.REFERRER_VIEW_REFERENCE_EXPAND_SETTING="REFERRER_VIEW_REFERENCE_EXPAND_SETTING",e.REFERRER_PANEL_ENABLED_SETTING="REFERRER_PANEL_ENABLED_SETTING",e.REFERRER_PANEL_TITLE_SETTING="REFERRER_PANEL_TITLE_SETTING",e.REFERRER_PANEL_STYLESHEET_SETTING="REFERRER_PANEL_STYLESHEET_SETTING",e.REFERRER_PANEL_REFERENCE_EXPAND_SETTING="REFERRER_PANEL_REFERENCE_EXPAND_SETTING",e.REFERRER_PANEL_MENTION_TEXT_MAX_LENGTH="REFERRER_PANEL_MENTION_TEXT_MAX_LENGTH",e.REFERRER_IDENTIFIER_ENABLED_SETTING="REFERRER_IDENTIFIER_ENABLED_SETTING",e.QUICK_LINK_SYMBOL_SETTING="QUICK_LINK_SYMBOL_SETTING",e.QUICK_LINK_SHOW_PATH_SETTING="QUICK_LINK_SHOW_PATH_SETTING",e.QUICK_LINK_ELEMENTS_ENABLED_SETTING="QUICK_LINK_ELEMENTS_ENABLED_SETTING",e.QUICK_LINK_AFTER_COMPLETION_SETTING="QUICK_LINK_AFTER_COMPLETION_SETTING",e.QUICK_LINK_CREATE_NOTE_SETTING="QUICK_LINK_CREATE_NOTE_SETTING",e.PREVIEWER_ENABLED_SETTING="PREVIEWER_ENABLED_SETTING",e.PREVIEWER_HOVER_DELAY_SETTING="PREVIEWER_HOVER_DELAY_SETTING",e.EXTRA_SYNTAX_ENABLED_SETTING="EXTRA_SYNTAX_ENABLED_SETTING",e.URL_ICON_ENABLED_SETTING="URL_ICON_ENABLED_SETTING",e.PREVIEWER_URL_BLACKLIST_SETTING="PREVIEWER_URL_BLACKLIST_SETTING",e.PREVIEWER_URL_BLACKLIST_LOCAL="joplin",e.URL_FOLD_ICON_SETTING="URL_FOLD_ICON_SETTING",e.NOTE_SEARCH_PATTERN_PLACEHOLDER="$keyword",e.REFERRER_SEARCH_PATTERN_PLACEHOLDER="$noteId",e.MAIN_MARK_CLASS_NAME="note-link-mark-main",e.FOOTNOTE_ID_PREFIX="fnref",e.FOOTNOTE_ITEM_CLASS_NAME="footnote-item",e.MARKDOWN_SCRIPT_ID="ylc395.noteLinkSystem.MARKDOWN_SCRIPT_ID",e.CODE_MIRROR_SCRIPT_ID="ylc395.noteLinkSystem.CODE_MIRROR_SCRIPT_ID"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TODO_CHECKBOX_ID_PREFIX=e.REFERENCE_CLASS_NAME=e.REFERENCE_ITEM_CLASS_NAME=e.REFERRER_TITLE_CLASS_NAME=e.REFERRER_TITLE_CONTAINER_CLASS_NAME=e.SCROLL_ANCHOR_ID=e.ROOT_ELEMENT_ID=e.ReferenceListExpandMode=e.MarkdownViewEvents=e.ReferrersListNumberType=e.ReferrersAutoListPosition=void 0,function(t){t[t.Top=0]="Top",t[t.Bottom=1]="Bottom",t[t.None=2]="None"}(e.ReferrersAutoListPosition||(e.ReferrersAutoListPosition={})),function(t){t[t.ReferrersCount=0]="ReferrersCount",t[t.ReferencesCount=1]="ReferencesCount",t[t.Both=2]="Both"}(e.ReferrersListNumberType||(e.ReferrersListNumberType={})),function(t){t.NoteDidUpdate="NoteDidUpdate",t.NewNoteOpen="NewNoteOpen"}(e.MarkdownViewEvents||(e.MarkdownViewEvents={})),function(t){t[t.ExpandNoteListOnly=0]="ExpandNoteListOnly",t[t.ExpandElementListOnly=1]="ExpandElementListOnly",t[t.ExpandBoth=2]="ExpandBoth",t[t.ExpandNone=3]="ExpandNone"}(e.ReferenceListExpandMode||(e.ReferenceListExpandMode={})),e.ROOT_ELEMENT_ID="rendered-md",e.SCROLL_ANCHOR_ID="note-link-scroll-anchor",e.REFERRER_TITLE_CONTAINER_CLASS_NAME="note-link-referrer-title-container",e.REFERRER_TITLE_CLASS_NAME="note-link-referrer-title",e.REFERENCE_ITEM_CLASS_NAME="note-link-reference-item",e.REFERENCE_CLASS_NAME="note-link-reference",e.TODO_CHECKBOX_ID_PREFIX="cb-label-md-checkbox-"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(5),a=(r=i)&&r.__esModule?r:{default:r};var s=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.is_strict=!1,this.original_pattern=e,this.pattern=this.sanitize(e)}return t.prototype.validate=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.original_pattern;if((0,a.default)(t)){var e=!0;return this.validate_rules.forEach((function(n){n.test(t)||(e=!1)})),this.invalidate_rules.forEach((function(n){n.test(t)&&(e=!1)})),e}return!this.is_required},t.prototype.test=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.pattern;return null===t&&(t=""),!(0,a.default)(e)||e.test(t)},t.prototype.sanitize=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.original_pattern;return(0,a.default)(t)||(t=this.default_value),(0,a.default)(t)&&this.validate(t)?(this.sanitize_replacements.forEach((function(e){var n=e.substring,r=e.replacement;t=t.replace(n,r)})),new RegExp("^"+t+"$")):null},o(t,[{key:"default_value",get:function(){return null}},{key:"is_required",get:function(){return!0}},{key:"validate_rules",get:function(){return[]}},{key:"invalidate_rules",get:function(){return[]}},{key:"sanitize_replacements",get:function(){return[]}}]),t}();e.default=s},function(t,e,n){"use strict";var r=n(18),o="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),i=Object.prototype.toString,a=Array.prototype.concat,s=Object.defineProperty,c=s&&function(){var t={};try{for(var e in s(t,"x",{enumerable:!1,value:t}),t)return!1;return t.x===t}catch(t){return!1}}(),u=function(t,e,n,r){var o;(!(e in t)||"function"==typeof(o=r)&&"[object Function]"===i.call(o)&&r())&&(c?s(t,e,{configurable:!0,enumerable:!1,value:n,writable:!0}):t[e]=n)},l=function(t,e){var n=arguments.length>2?arguments[2]:{},i=r(e);o&&(i=a.call(i,Object.getOwnPropertySymbols(e)));for(var s=0;s<i.length;s+=1)u(t,i[s],e[i[s]],n[i[s]])};l.supportsDescriptors=!!c,t.exports=l},function(t,e,n){(function(e){var n=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,o=/^0b[01]+$/i,i=/^0o[0-7]+$/i,a=parseInt,s="object"==typeof e&&e&&e.Object===Object&&e,c="object"==typeof self&&self&&self.Object===Object&&self,u=s||c||Function("return this")(),l=Object.prototype.toString,f=Math.max,p=Math.min,d=function(){return u.Date.now()};function h(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function y(t){if("number"==typeof t)return t;if(function(t){return"symbol"==typeof t||function(t){return!!t&&"object"==typeof t}(t)&&"[object Symbol]"==l.call(t)}(t))return NaN;if(h(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=h(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(n,"");var s=o.test(t);return s||i.test(t)?a(t.slice(2),s?2:8):r.test(t)?NaN:+t}t.exports=function(t,e,n){var r,o,i,a,s,c,u=0,l=!1,v=!1,E=!0;if("function"!=typeof t)throw new TypeError("Expected a function");function m(e){var n=r,i=o;return r=o=void 0,u=e,a=t.apply(i,n)}function g(t){return u=t,s=setTimeout(_,e),l?m(t):a}function b(t){var n=t-c;return void 0===c||n>=e||n<0||v&&t-u>=i}function _(){var t=d();if(b(t))return w(t);s=setTimeout(_,function(t){var n=e-(t-c);return v?p(n,i-(t-u)):n}(t))}function w(t){return s=void 0,E&&r?m(t):(r=o=void 0,a)}function R(){var t=d(),n=b(t);if(r=arguments,o=this,c=t,n){if(void 0===s)return g(c);if(v)return s=setTimeout(_,e),m(c)}return void 0===s&&(s=setTimeout(_,e)),a}return e=y(e)||0,h(n)&&(l=!!n.leading,i=(v="maxWait"in n)?f(y(n.maxWait)||0,e):i,E="trailing"in n?!!n.trailing:E),R.cancel=function(){void 0!==s&&clearTimeout(s),u=0,r=c=o=s=void 0},R.flush=function(){return void 0===s?a:w(d())},R}}).call(this,n(7))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return null!=t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getRemoteUrl=e.parseHtml=void 0,e.parseHtml=function(t){return(new DOMParser).parseFromString(t,"text/html")},e.getRemoteUrl=function(t){return t.startsWith("http://")||t.startsWith("https://")?t:"https://"+t}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(43);function o(t,e,n,r,o){var a=i.apply(this,arguments);return t.addEventListener(n,a,o),{destroy:function(){t.removeEventListener(n,a,o)}}}function i(t,e,n,o){return function(n){n.delegateTarget=r(n.target,e),n.delegateTarget&&o.call(t,n)}}t.exports=function(t,e,n,r,i){return"function"==typeof t.addEventListener?o.apply(null,arguments):"function"==typeof n?o.bind(null,document).apply(null,arguments):("string"==typeof t&&(t=document.querySelectorAll(t)),Array.prototype.map.call(t,(function(t){return o(t,e,n,r,i)})))}},function(t,e,n){"use strict";var r=n(20);t.exports=function(){return r()&&!!Symbol.toStringTag}},function(t,e,n){"use strict";var r=n(55);t.exports=Function.prototype.bind||r},function(t,e,n){"use strict";var r=n(10),o=n(22),i=o("%Function.prototype.apply%"),a=o("%Function.prototype.call%"),s=o("%Reflect.apply%",!0)||r.call(a,i),c=o("%Object.getOwnPropertyDescriptor%",!0),u=o("%Object.defineProperty%",!0),l=o("%Math.max%");if(u)try{u({},"a",{value:1})}catch(t){u=null}t.exports=function(t){var e=s(r,a,arguments);if(c&&u){var n=c(e,"length");n.configurable&&u(e,"length",{value:1+l(0,t.length-(arguments.length-1))})}return e};var f=function(){return s(r,i,arguments)};u?u(t.exports,"apply",{value:f}):t.exports.apply=f},function(t,e,n){"use strict";var r=n(30),o=n.n(r),i=n(31),a=n.n(i)()(o.a);a.push([t.i,".tippy-box[data-placement^=top]>.tippy-svg-arrow{bottom:0}.tippy-box[data-placement^=top]>.tippy-svg-arrow:after,.tippy-box[data-placement^=top]>.tippy-svg-arrow>svg{top:16px;transform:rotate(180deg)}.tippy-box[data-placement^=bottom]>.tippy-svg-arrow{top:0}.tippy-box[data-placement^=bottom]>.tippy-svg-arrow>svg{bottom:16px}.tippy-box[data-placement^=left]>.tippy-svg-arrow{right:0}.tippy-box[data-placement^=left]>.tippy-svg-arrow:after,.tippy-box[data-placement^=left]>.tippy-svg-arrow>svg{transform:rotate(90deg);top:calc(50% - 3px);left:11px}.tippy-box[data-placement^=right]>.tippy-svg-arrow{left:0}.tippy-box[data-placement^=right]>.tippy-svg-arrow:after,.tippy-box[data-placement^=right]>.tippy-svg-arrow>svg{transform:rotate(-90deg);top:calc(50% - 3px);right:11px}.tippy-svg-arrow{width:16px;height:16px;fill:#333;text-align:initial}.tippy-svg-arrow,.tippy-svg-arrow>svg{position:absolute}","",{version:3,sources:["webpack://./node_modules/tippy.js/dist/svg-arrow.css"],names:[],mappings:"AAAA,iDAAiD,QAAQ,CAAC,4GAA4G,QAAQ,CAAC,wBAAwB,CAAC,oDAAoD,KAAK,CAAC,wDAAwD,WAAW,CAAC,kDAAkD,OAAO,CAAC,8GAA8G,uBAAuB,CAAC,mBAAmB,CAAC,SAAS,CAAC,mDAAmD,MAAM,CAAC,gHAAgH,wBAAwB,CAAC,mBAAmB,CAAC,UAAU,CAAC,iBAAiB,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,kBAAkB,CAAC,sCAAsC,iBAAiB",sourcesContent:[".tippy-box[data-placement^=top]>.tippy-svg-arrow{bottom:0}.tippy-box[data-placement^=top]>.tippy-svg-arrow:after,.tippy-box[data-placement^=top]>.tippy-svg-arrow>svg{top:16px;transform:rotate(180deg)}.tippy-box[data-placement^=bottom]>.tippy-svg-arrow{top:0}.tippy-box[data-placement^=bottom]>.tippy-svg-arrow>svg{bottom:16px}.tippy-box[data-placement^=left]>.tippy-svg-arrow{right:0}.tippy-box[data-placement^=left]>.tippy-svg-arrow:after,.tippy-box[data-placement^=left]>.tippy-svg-arrow>svg{transform:rotate(90deg);top:calc(50% - 3px);left:11px}.tippy-box[data-placement^=right]>.tippy-svg-arrow{left:0}.tippy-box[data-placement^=right]>.tippy-svg-arrow:after,.tippy-box[data-placement^=right]>.tippy-svg-arrow>svg{transform:rotate(-90deg);top:calc(50% - 3px);right:11px}.tippy-svg-arrow{width:16px;height:16px;fill:#333;text-align:initial}.tippy-svg-arrow,.tippy-svg-arrow>svg{position:absolute}"],sourceRoot:""}]),e.a=a},function(t,e,n){"use strict";var r=Object.prototype.hasOwnProperty,o="~";function i(){}function a(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function s(t,e,n,r,i){if("function"!=typeof n)throw new TypeError("The listener must be a function");var s=new a(n,r||t,i),c=o?o+e:e;return t._events[c]?t._events[c].fn?t._events[c]=[t._events[c],s]:t._events[c].push(s):(t._events[c]=s,t._eventsCount++),t}function c(t,e){0==--t._eventsCount?t._events=new i:delete t._events[e]}function u(){this._events=new i,this._eventsCount=0}Object.create&&(i.prototype=Object.create(null),(new i).__proto__||(o=!1)),u.prototype.eventNames=function(){var t,e,n=[];if(0===this._eventsCount)return n;for(e in t=this._events)r.call(t,e)&&n.push(o?e.slice(1):e);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(t)):n},u.prototype.listeners=function(t){var e=o?o+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var r=0,i=n.length,a=new Array(i);r<i;r++)a[r]=n[r].fn;return a},u.prototype.listenerCount=function(t){var e=o?o+t:t,n=this._events[e];return n?n.fn?1:n.length:0},u.prototype.emit=function(t,e,n,r,i,a){var s=o?o+t:t;if(!this._events[s])return!1;var c,u,l=this._events[s],f=arguments.length;if(l.fn){switch(l.once&&this.removeListener(t,l.fn,void 0,!0),f){case 1:return l.fn.call(l.context),!0;case 2:return l.fn.call(l.context,e),!0;case 3:return l.fn.call(l.context,e,n),!0;case 4:return l.fn.call(l.context,e,n,r),!0;case 5:return l.fn.call(l.context,e,n,r,i),!0;case 6:return l.fn.call(l.context,e,n,r,i,a),!0}for(u=1,c=new Array(f-1);u<f;u++)c[u-1]=arguments[u];l.fn.apply(l.context,c)}else{var p,d=l.length;for(u=0;u<d;u++)switch(l[u].once&&this.removeListener(t,l[u].fn,void 0,!0),f){case 1:l[u].fn.call(l[u].context);break;case 2:l[u].fn.call(l[u].context,e);break;case 3:l[u].fn.call(l[u].context,e,n);break;case 4:l[u].fn.call(l[u].context,e,n,r);break;default:if(!c)for(p=1,c=new Array(f-1);p<f;p++)c[p-1]=arguments[p];l[u].fn.apply(l[u].context,c)}}return!0},u.prototype.on=function(t,e,n){return s(this,t,e,n,!1)},u.prototype.once=function(t,e,n){return s(this,t,e,n,!0)},u.prototype.removeListener=function(t,e,n,r){var i=o?o+t:t;if(!this._events[i])return this;if(!e)return c(this,i),this;var a=this._events[i];if(a.fn)a.fn!==e||r&&!a.once||n&&a.context!==n||c(this,i);else{for(var s=0,u=[],l=a.length;s<l;s++)(a[s].fn!==e||r&&!a[s].once||n&&a[s].context!==n)&&u.push(a[s]);u.length?this._events[i]=1===u.length?u[0]:u:c(this,i)}return this},u.prototype.removeAllListeners=function(t){var e;return t?(e=o?o+t:t,this._events[e]&&c(this,e)):(this._events=new i,this._eventsCount=0),this},u.prototype.off=u.prototype.removeListener,u.prototype.addListener=u.prototype.on,u.prefixed=o,u.EventEmitter=u,t.exports=u},function(t,e,n){(function(t,r){var o=n(15),i=n(38),a=/\b__p \+= '';/g,s=/\b(__p \+=) '' \+/g,c=/(__e\(.*?\)|\b__t\)) \+\n'';/g,u=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,l=/^\[object .+?Constructor\]$/,f=/^(?:0|[1-9]\d*)$/,p=/($^)/,d=/['\n\r\u2028\u2029\\]/g,h={};h["[object Float32Array]"]=h["[object Float64Array]"]=h["[object Int8Array]"]=h["[object Int16Array]"]=h["[object Int32Array]"]=h["[object Uint8Array]"]=h["[object Uint8ClampedArray]"]=h["[object Uint16Array]"]=h["[object Uint32Array]"]=!0,h["[object Arguments]"]=h["[object Array]"]=h["[object ArrayBuffer]"]=h["[object Boolean]"]=h["[object DataView]"]=h["[object Date]"]=h["[object Error]"]=h["[object Function]"]=h["[object Map]"]=h["[object Number]"]=h["[object Object]"]=h["[object RegExp]"]=h["[object Set]"]=h["[object String]"]=h["[object WeakMap]"]=!1;var y={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},v="object"==typeof t&&t&&t.Object===Object&&t,E="object"==typeof self&&self&&self.Object===Object&&self,m=v||E||Function("return this")(),g=e&&!e.nodeType&&e,b=g&&"object"==typeof r&&r&&!r.nodeType&&r,_=b&&b.exports===g,w=_&&v.process,R=function(){try{var t=b&&b.require&&b.require("util").types;return t||w&&w.binding&&w.binding("util")}catch(t){}}(),T=R&&R.isTypedArray;function A(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function O(t,e){for(var n=-1,r=null==t?0:t.length,o=Array(r);++n<r;)o[n]=e(t[n],n,t);return o}function N(t){return"\\"+y[t]}function I(t,e){return function(n){return t(e(n))}}var x,S=Function.prototype,L=Object.prototype,M=m["__core-js_shared__"],P=S.toString,j=L.hasOwnProperty,C=(x=/[^.]+$/.exec(M&&M.keys&&M.keys.IE_PROTO||""))?"Symbol(src)_1."+x:"",D=L.toString,k=P.call(Object),B=RegExp("^"+P.call(j).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),F=_?m.Buffer:void 0,U=m.Symbol,H=I(Object.getPrototypeOf,Object),W=L.propertyIsEnumerable,G=U?U.toStringTag:void 0,V=function(){try{var t=function(t){return!(!_t(t)||function(t){return!!C&&C in t}(t))&&(gt(t)?B:l).test(function(t){if(null!=t){try{return P.call(t)}catch(t){}try{return t+""}catch(t){}}return""}(t))}(e=function(t,e){return null==t?void 0:t[e]}(Object,"defineProperty"))?e:void 0;return t({},"",{}),t}catch(t){}var e}(),$=F?F.isBuffer:void 0,K=I(Object.keys,Object),z=Math.max,q=Date.now,X=U?U.prototype:void 0,Y=X?X.toString:void 0;function Q(t,e){var n=yt(t),r=!n&&ht(t),o=!n&&!r&&Et(t),i=!n&&!r&&!o&&Rt(t),a=n||r||o||i,s=a?function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}(t.length,String):[],c=s.length;for(var u in t)!e&&!j.call(t,u)||a&&("length"==u||o&&("offset"==u||"parent"==u)||i&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||at(u,c))||s.push(u);return s}function J(t,e,n){var r=t[e];j.call(t,e)&&dt(r,n)&&(void 0!==n||e in t)||Z(t,e,n)}function Z(t,e,n){"__proto__"==e&&V?V(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function tt(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":G&&G in Object(t)?function(t){var e=j.call(t,G),n=t[G];try{t[G]=void 0;var r=!0}catch(t){}var o=D.call(t);r&&(e?t[G]=n:delete t[G]);return o}(t):function(t){return D.call(t)}(t)}function et(t){return wt(t)&&"[object Arguments]"==tt(t)}function nt(t){if(!_t(t))return function(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e}(t);var e=ct(t),n=[];for(var r in t)("constructor"!=r||!e&&j.call(t,r))&&n.push(r);return n}function rt(t,e){return pt(function(t,e,n){return e=z(void 0===e?t.length-1:e,0),function(){for(var r=arguments,o=-1,i=z(r.length-e,0),a=Array(i);++o<i;)a[o]=r[e+o];o=-1;for(var s=Array(e+1);++o<e;)s[o]=r[o];return s[e]=n(a),A(t,this,s)}}(t,e,It),t+"")}function ot(t){if("string"==typeof t)return t;if(yt(t))return O(t,ot)+"";if(function(t){return"symbol"==typeof t||wt(t)&&"[object Symbol]"==tt(t)}(t))return Y?Y.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function it(t,e,n,r){return void 0===t||dt(t,L[n])&&!j.call(r,n)?e:t}function at(t,e){var n=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==n||"symbol"!=n&&f.test(t))&&t>-1&&t%1==0&&t<e}function st(t,e,n){if(!_t(n))return!1;var r=typeof e;return!!("number"==r?vt(n)&&at(e,n.length):"string"==r&&e in n)&&dt(n[e],t)}function ct(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||L)}var ut,lt,ft,pt=(ut=V?function(t,e){return V(t,"toString",{configurable:!0,enumerable:!1,value:(n=e,function(){return n}),writable:!0});var n}:It,lt=0,ft=0,function(){var t=q(),e=16-(t-ft);if(ft=t,e>0){if(++lt>=800)return arguments[0]}else lt=0;return ut.apply(void 0,arguments)});function dt(t,e){return t===e||t!=t&&e!=e}var ht=et(function(){return arguments}())?et:function(t){return wt(t)&&j.call(t,"callee")&&!W.call(t,"callee")},yt=Array.isArray;function vt(t){return null!=t&&bt(t.length)&&!gt(t)}var Et=$||function(){return!1};function mt(t){if(!wt(t))return!1;var e=tt(t);return"[object Error]"==e||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!function(t){if(!wt(t)||"[object Object]"!=tt(t))return!1;var e=H(t);if(null===e)return!0;var n=j.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&P.call(n)==k}(t)}function gt(t){if(!_t(t))return!1;var e=tt(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}function bt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function _t(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function wt(t){return null!=t&&"object"==typeof t}var Rt=T?function(t){return function(e){return t(e)}}(T):function(t){return wt(t)&&bt(t.length)&&!!h[tt(t)]};var Tt,At=(Tt=function(t,e,n,r){!function(t,e,n,r){var o=!n;n||(n={});for(var i=-1,a=e.length;++i<a;){var s=e[i],c=r?r(n[s],t[s],s,n,t):void 0;void 0===c&&(c=t[s]),o?Z(n,s,c):J(n,s,c)}}(e,function(t){return vt(t)?Q(t,!0):nt(t)}(e),t,r)},rt((function(t,e){var n=-1,r=e.length,o=r>1?e[r-1]:void 0,i=r>2?e[2]:void 0;for(o=Tt.length>3&&"function"==typeof o?(r--,o):void 0,i&&st(e[0],e[1],i)&&(o=r<3?void 0:o,r=1),t=Object(t);++n<r;){var a=e[n];a&&Tt(t,a,n,o)}return t})));function Ot(t){return vt(t)?Q(t):function(t){if(!ct(t))return K(t);var e=[];for(var n in Object(t))j.call(t,n)&&"constructor"!=n&&e.push(n);return e}(t)}var Nt=rt((function(t,e){try{return A(t,void 0,e)}catch(t){return mt(t)?t:new Error(t)}}));function It(t){return t}r.exports=function(t,e,n){var r,l=i.imports._.templateSettings||i;n&&st(t,e,n)&&(e=void 0),t=null==(r=t)?"":ot(r),e=At({},e,l,it);var f,h,y,v=At({},e.imports,l.imports,it),E=Ot(v),m=(f=v,O(E,(function(t){return f[t]}))),g=0,b=e.interpolate||p,_="__p += '",w=RegExp((e.escape||p).source+"|"+b.source+"|"+(b===o?u:p).source+"|"+(e.evaluate||p).source+"|$","g"),R=j.call(e,"sourceURL")?"//# sourceURL="+(e.sourceURL+"").replace(/[\r\n]/g," ")+"\n":"";t.replace(w,(function(e,n,r,o,i,a){return r||(r=o),_+=t.slice(g,a).replace(d,N),n&&(h=!0,_+="' +\n__e("+n+") +\n'"),i&&(y=!0,_+="';\n"+i+";\n__p += '"),r&&(_+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),g=a+e.length,e})),_+="';\n";var T=j.call(e,"variable")&&e.variable;T||(_="with (obj) {\n"+_+"\n}\n"),_=(y?_.replace(a,""):_).replace(s,"$1").replace(c,"$1;"),_="function("+(T||"obj")+") {\n"+(T?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(h?", __e = _.escape":"")+(y?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+_+"return __p\n}";var A=Nt((function(){return Function(E,R+"return "+_).apply(void 0,m)}));if(A.source=_,mt(A))throw A;return A}}).call(this,n(7),n(37)(t))},function(t,e){t.exports=/<%=([\s\S]+?)%>/g},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isIgnoredIdElement=void 0;const r=n(1),o=n(0);e.isIgnoredIdElement=function(t){const{id:e,classList:n}=t;return e.startsWith(r.TODO_CHECKBOX_ID_PREFIX)||e.startsWith(o.FOOTNOTE_ID_PREFIX)||e.startsWith(r.SCROLL_ANCHOR_ID)||n.contains(o.FOOTNOTE_ITEM_CLASS_NAME)}},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-hash" viewBox="0 0 16 16"><path d="M8.39 12.648a1.32 1.32 0 0 0-.015.18c0 .305.21.508.5.508.266 0 .492-.172.555-.477l.554-2.703h1.204c.421 0 .617-.234.617-.547 0-.312-.188-.53-.617-.53h-.985l.516-2.524h1.265c.43 0 .618-.227.618-.547 0-.313-.188-.524-.618-.524h-1.046l.476-2.304a1.06 1.06 0 0 0 .016-.164.51.51 0 0 0-.516-.516.54.54 0 0 0-.539.43l-.523 2.554H7.617l.477-2.304c.008-.04.015-.118.015-.164a.512.512 0 0 0-.523-.516.539.539 0 0 0-.531.43L6.53 5.484H5.414c-.43 0-.617.22-.617.532 0 .312.187.539.617.539h.906l-.515 2.523H4.609c-.421 0-.609.219-.609.531 0 .313.188.547.61.547h.976l-.516 2.492c-.008.04-.015.125-.015.18 0 .305.21.508.5.508.265 0 .492-.172.554-.477l.555-2.703h2.242l-.515 2.492zm-1-6.109h2.266l-.515 2.563H6.859l.532-2.563z"></path></svg>'},function(t,e,n){"use strict";var r=Array.prototype.slice,o=n(19),i=Object.keys,a=i?function(t){return i(t)}:n(52),s=Object.keys;a.shim=function(){Object.keys?function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2)||(Object.keys=function(t){return o(t)?s(r.call(t)):s(t)}):Object.keys=a;return Object.keys||a},t.exports=a},function(t,e,n){"use strict";var r=Object.prototype.toString;t.exports=function(t){var e=r.call(t),n="[object Arguments]"===e;return n||(n="[object Array]"!==e&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===r.call(t.callee)),n}},function(t,e,n){"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),n=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var r=Object.getOwnPropertySymbols(t);if(1!==r.length||r[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(t,e);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},function(t,e,n){"use strict";var r=n(22),o=n(11),i=o(r("String.prototype.indexOf"));t.exports=function(t,e){var n=r(t,!!e);return"function"==typeof n&&i(t,".prototype.")>-1?o(n):n}},function(t,e,n){"use strict";var r=SyntaxError,o=Function,i=TypeError,a=function(t){try{return o('"use strict"; return ('+t+").constructor;")()}catch(t){}},s=Object.getOwnPropertyDescriptor;if(s)try{s({},"")}catch(t){s=null}var c=function(){throw new i},u=s?function(){try{return c}catch(t){try{return s(arguments,"callee").get}catch(t){return c}}}():c,l=n(54)(),f=Object.getPrototypeOf||function(t){return t.__proto__},p={},d="undefined"==typeof Uint8Array?void 0:f(Uint8Array),h={"%AggregateError%":"undefined"==typeof AggregateError?void 0:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayIteratorPrototype%":l?f([][Symbol.iterator]()):void 0,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":p,"%AsyncGenerator%":p,"%AsyncGeneratorFunction%":p,"%AsyncIteratorPrototype%":p,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%BigInt%":"undefined"==typeof BigInt?void 0:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?void 0:FinalizationRegistry,"%Function%":o,"%GeneratorFunction%":p,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":l?f(f([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&l?f((new Map)[Symbol.iterator]()):void 0,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&l?f((new Set)[Symbol.iterator]()):void 0,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":l?f(""[Symbol.iterator]()):void 0,"%Symbol%":l?Symbol:void 0,"%SyntaxError%":r,"%ThrowTypeError%":u,"%TypedArray%":d,"%TypeError%":i,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?void 0:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet},y={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},v=n(10),E=n(56),m=v.call(Function.call,Array.prototype.concat),g=v.call(Function.apply,Array.prototype.splice),b=v.call(Function.call,String.prototype.replace),_=v.call(Function.call,String.prototype.slice),w=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,R=/\\(\\)?/g,T=function(t){var e=_(t,0,1),n=_(t,-1);if("%"===e&&"%"!==n)throw new r("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==e)throw new r("invalid intrinsic syntax, expected opening `%`");var o=[];return b(t,w,(function(t,e,n,r){o[o.length]=n?b(r,R,"$1"):e||t})),o},A=function(t,e){var n,o=t;if(E(y,o)&&(o="%"+(n=y[o])[0]+"%"),E(h,o)){var s=h[o];if(s===p&&(s=function t(e){var n;if("%AsyncFunction%"===e)n=a("async function () {}");else if("%GeneratorFunction%"===e)n=a("function* () {}");else if("%AsyncGeneratorFunction%"===e)n=a("async function* () {}");else if("%AsyncGenerator%"===e){var r=t("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===e){var o=t("%AsyncGenerator%");o&&(n=f(o.prototype))}return h[e]=n,n}(o)),void 0===s&&!e)throw new i("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:n,name:o,value:s}}throw new r("intrinsic "+t+" does not exist!")};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new i("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new i('"allowMissing" argument must be a boolean');var n=T(t),o=n.length>0?n[0]:"",a=A("%"+o+"%",e),c=a.name,u=a.value,l=!1,f=a.alias;f&&(o=f[0],g(n,m([0,1],f)));for(var p=1,d=!0;p<n.length;p+=1){var y=n[p],v=_(y,0,1),b=_(y,-1);if(('"'===v||"'"===v||"`"===v||'"'===b||"'"===b||"`"===b)&&v!==b)throw new r("property names with quotes must have matching quotes");if("constructor"!==y&&d||(l=!0),E(h,c="%"+(o+="."+y)+"%"))u=h[c];else if(null!=u){if(!(y in u)){if(!e)throw new i("base intrinsic for "+t+" exists, but the property is not available.");return}if(s&&p+1>=n.length){var w=s(u,y);u=(d=!!w)&&"get"in w&&!("originalValue"in w.get)?w.get:u[y]}else d=E(u,y),u=u[y];d&&!l&&(h[c]=u)}}return u}},function(t,e,n){"use strict";var r=function(t){return t!=t};t.exports=function(t,e){return 0===t&&0===e?1/t==1/e:t===e||!(!r(t)||!r(e))}},function(t,e,n){"use strict";var r=n(23);t.exports=function(){return"function"==typeof Object.is?Object.is:r}},function(t,e,n){"use strict";var r=Object,o=TypeError;t.exports=function(){if(null!=this&&this!==r(this))throw new o("RegExp.prototype.flags getter called on non-object");var t="";return this.hasIndices&&(t+="d"),this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),this.dotAll&&(t+="s"),this.unicode&&(t+="u"),this.sticky&&(t+="y"),t}},function(t,e,n){"use strict";var r=n(25),o=n(3).supportsDescriptors,i=Object.getOwnPropertyDescriptor;t.exports=function(){if(o&&"gim"===/a/gim.flags){var t=i(RegExp.prototype,"flags");if(t&&"function"==typeof t.get&&"boolean"==typeof/a/.dotAll)return t.get}return r}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.parseUrlFromLinkEl=e.processNoteContent=void 0;const r=n(6);e.processNoteContent=function(t,e){const n=r.parseHtml(t),o=[...n.querySelectorAll('a[href^=":/"]')];for(const t of o){const n=document.createElement("span"),r=t.getAttribute("href").slice(2),o=e[r];if(!o)continue;const i=o.contentType.split("/")[0];let a=void 0;"video"===i&&(a=document.createElement("video")),"audio"===i&&(a=document.createElement("audio")),a&&(a.controls=!0,a.src=window.URL.createObjectURL(new Blob([o.body])),t.after(a));const s=r.split("#")[0],c=(()=>{const t=o.contentType||"";return t.startsWith("video")?"fa-file-video":t.startsWith("audio")?"fa-file-audio":"fa-joplin"})();t.setAttribute("onclick",`ipcProxySendToHost("joplin://${r}", { resourceId: "${s}" }); return false;`),t.href="#",n.classList.add("resource-icon",c),t.prepend(n)}const i=[...n.querySelectorAll('img[src^=":/"]')];for(const t of i){const n=e[t.getAttribute("src").slice(2)];n&&(t.src=window.URL.createObjectURL(new Blob([n.body])))}return n.body.innerHTML},e.parseUrlFromLinkEl=function(t,e){var n,r;if(t.dataset.noteLinkReferrerId)return{noteId:t.dataset.noteLinkReferrerId};const o=null===(n=t.onclick)||void 0===n?void 0:n.toString(),i=null===(r=null==o?void 0:o.match(/\("joplin:\/\/(.+?)",/))||void 0===r?void 0:r[1];if(!i){const n=t.getAttribute("href");return n&&n.startsWith("#")&&n.length>1?{noteId:e,elementId:decodeURIComponent(n.slice(1))}:void 0}const[a,s]=i.split("#");return{noteId:a,elementId:s}}},function(t,e,n){"use strict";function r(t,e){void 0===e&&(e=!1);var n=t.getBoundingClientRect();return{width:n.width/1,height:n.height/1,top:n.top/1,right:n.right/1,bottom:n.bottom/1,left:n.left/1,x:n.left/1,y:n.top/1}}function o(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function i(t){var e=o(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function a(t){return t instanceof o(t).Element||t instanceof Element}function s(t){return t instanceof o(t).HTMLElement||t instanceof HTMLElement}function c(t){return"undefined"!=typeof ShadowRoot&&(t instanceof o(t).ShadowRoot||t instanceof ShadowRoot)}function u(t){return t?(t.nodeName||"").toLowerCase():null}function l(t){return((a(t)?t.ownerDocument:t.document)||window.document).documentElement}function f(t){return r(l(t)).left+i(t).scrollLeft}function p(t){return o(t).getComputedStyle(t)}function d(t){var e=p(t),n=e.overflow,r=e.overflowX,o=e.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function h(t,e,n){void 0===n&&(n=!1);var a,c,p=s(e),h=s(e)&&function(t){var e=t.getBoundingClientRect(),n=e.width/t.offsetWidth||1,r=e.height/t.offsetHeight||1;return 1!==n||1!==r}(e),y=l(e),v=r(t,h),E={scrollLeft:0,scrollTop:0},m={x:0,y:0};return(p||!p&&!n)&&(("body"!==u(e)||d(y))&&(E=(a=e)!==o(a)&&s(a)?{scrollLeft:(c=a).scrollLeft,scrollTop:c.scrollTop}:i(a)),s(e)?((m=r(e,!0)).x+=e.clientLeft,m.y+=e.clientTop):y&&(m.x=f(y))),{x:v.left+E.scrollLeft-m.x,y:v.top+E.scrollTop-m.y,width:v.width,height:v.height}}function y(t){var e=r(t),n=t.offsetWidth,o=t.offsetHeight;return Math.abs(e.width-n)<=1&&(n=e.width),Math.abs(e.height-o)<=1&&(o=e.height),{x:t.offsetLeft,y:t.offsetTop,width:n,height:o}}function v(t){return"html"===u(t)?t:t.assignedSlot||t.parentNode||(c(t)?t.host:null)||l(t)}function E(t,e){var n;void 0===e&&(e=[]);var r=function t(e){return["html","body","#document"].indexOf(u(e))>=0?e.ownerDocument.body:s(e)&&d(e)?e:t(v(e))}(t),i=r===(null==(n=t.ownerDocument)?void 0:n.body),a=o(r),c=i?[a].concat(a.visualViewport||[],d(r)?r:[]):r,l=e.concat(c);return i?l:l.concat(E(v(c)))}function m(t){return["table","td","th"].indexOf(u(t))>=0}function g(t){return s(t)&&"fixed"!==p(t).position?t.offsetParent:null}function b(t){for(var e=o(t),n=g(t);n&&m(n)&&"static"===p(n).position;)n=g(n);return n&&("html"===u(n)||"body"===u(n)&&"static"===p(n).position)?e:n||function(t){var e=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&s(t)&&"fixed"===p(t).position)return null;for(var n=v(t);s(n)&&["html","body"].indexOf(u(n))<0;){var r=p(n);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||e&&"filter"===r.willChange||e&&r.filter&&"none"!==r.filter)return n;n=n.parentNode}return null}(t)||e}n.r(e),n.d(e,"animateFill",(function(){return ee})),n.d(e,"createSingleton",(function(){return Jt})),n.d(e,"delegate",(function(){return te})),n.d(e,"followCursor",(function(){return ie})),n.d(e,"hideAll",(function(){return Yt})),n.d(e,"inlinePositioning",(function(){return ae})),n.d(e,"roundArrow",(function(){return st})),n.d(e,"sticky",(function(){return se}));var _="top",w="bottom",R="right",T="left",A=[_,w,R,T],O=A.reduce((function(t,e){return t.concat([e+"-start",e+"-end"])}),[]),N=[].concat(A,["auto"]).reduce((function(t,e){return t.concat([e,e+"-start",e+"-end"])}),[]),I=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function x(t){var e=new Map,n=new Set,r=[];return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){n.has(t.name)||function t(o){n.add(o.name),[].concat(o.requires||[],o.requiresIfExists||[]).forEach((function(r){if(!n.has(r)){var o=e.get(r);o&&t(o)}})),r.push(o)}(t)})),r}var S={placement:"bottom",modifiers:[],strategy:"absolute"};function L(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function M(t){void 0===t&&(t={});var e=t,n=e.defaultModifiers,r=void 0===n?[]:n,o=e.defaultOptions,i=void 0===o?S:o;return function(t,e,n){void 0===n&&(n=i);var o,s,c={placement:"bottom",orderedModifiers:[],options:Object.assign({},S,i),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},u=[],l=!1,f={state:c,setOptions:function(n){var o="function"==typeof n?n(c.options):n;p(),c.options=Object.assign({},i,c.options,o),c.scrollParents={reference:a(t)?E(t):t.contextElement?E(t.contextElement):[],popper:E(e)};var s=function(t){var e=x(t);return I.reduce((function(t,n){return t.concat(e.filter((function(t){return t.phase===n})))}),[])}(function(t){var e=t.reduce((function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign({},n,e,{options:Object.assign({},n.options,e.options),data:Object.assign({},n.data,e.data)}):e,t}),{});return Object.keys(e).map((function(t){return e[t]}))}([].concat(r,c.options.modifiers)));return c.orderedModifiers=s.filter((function(t){return t.enabled})),c.orderedModifiers.forEach((function(t){var e=t.name,n=t.options,r=void 0===n?{}:n,o=t.effect;if("function"==typeof o){var i=o({state:c,name:e,instance:f,options:r});u.push(i||function(){})}})),f.update()},forceUpdate:function(){if(!l){var t=c.elements,e=t.reference,n=t.popper;if(L(e,n)){c.rects={reference:h(e,b(n),"fixed"===c.options.strategy),popper:y(n)},c.reset=!1,c.placement=c.options.placement,c.orderedModifiers.forEach((function(t){return c.modifiersData[t.name]=Object.assign({},t.data)}));for(var r=0;r<c.orderedModifiers.length;r++)if(!0!==c.reset){var o=c.orderedModifiers[r],i=o.fn,a=o.options,s=void 0===a?{}:a,u=o.name;"function"==typeof i&&(c=i({state:c,options:s,name:u,instance:f})||c)}else c.reset=!1,r=-1}}},update:(o=function(){return new Promise((function(t){f.forceUpdate(),t(c)}))},function(){return s||(s=new Promise((function(t){Promise.resolve().then((function(){s=void 0,t(o())}))}))),s}),destroy:function(){p(),l=!0}};if(!L(t,e))return f;function p(){u.forEach((function(t){return t()})),u=[]}return f.setOptions(n).then((function(t){!l&&n.onFirstUpdate&&n.onFirstUpdate(t)})),f}}var P={passive:!0};var j={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,r=t.options,i=r.scroll,a=void 0===i||i,s=r.resize,c=void 0===s||s,u=o(e.elements.popper),l=[].concat(e.scrollParents.reference,e.scrollParents.popper);return a&&l.forEach((function(t){t.addEventListener("scroll",n.update,P)})),c&&u.addEventListener("resize",n.update,P),function(){a&&l.forEach((function(t){t.removeEventListener("scroll",n.update,P)})),c&&u.removeEventListener("resize",n.update,P)}},data:{}};function C(t){return t.split("-")[0]}function D(t){return t.split("-")[1]}function k(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}function B(t){var e,n=t.reference,r=t.element,o=t.placement,i=o?C(o):null,a=o?D(o):null,s=n.x+n.width/2-r.width/2,c=n.y+n.height/2-r.height/2;switch(i){case _:e={x:s,y:n.y-r.height};break;case w:e={x:s,y:n.y+n.height};break;case R:e={x:n.x+n.width,y:c};break;case T:e={x:n.x-r.width,y:c};break;default:e={x:n.x,y:n.y}}var u=i?k(i):null;if(null!=u){var l="y"===u?"height":"width";switch(a){case"start":e[u]=e[u]-(n[l]/2-r[l]/2);break;case"end":e[u]=e[u]+(n[l]/2-r[l]/2)}}return e}var F={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,n=t.name;e.modifiersData[n]=B({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}},U=Math.max,H=Math.min,W=Math.round,G={top:"auto",right:"auto",bottom:"auto",left:"auto"};function V(t){var e,n=t.popper,r=t.popperRect,i=t.placement,a=t.variation,s=t.offsets,c=t.position,u=t.gpuAcceleration,f=t.adaptive,d=t.roundOffsets,h=!0===d?function(t){var e=t.x,n=t.y,r=window.devicePixelRatio||1;return{x:W(W(e*r)/r)||0,y:W(W(n*r)/r)||0}}(s):"function"==typeof d?d(s):s,y=h.x,v=void 0===y?0:y,E=h.y,m=void 0===E?0:E,g=s.hasOwnProperty("x"),A=s.hasOwnProperty("y"),O=T,N=_,I=window;if(f){var x=b(n),S="clientHeight",L="clientWidth";x===o(n)&&"static"!==p(x=l(n)).position&&"absolute"===c&&(S="scrollHeight",L="scrollWidth"),x=x,i!==_&&(i!==T&&i!==R||"end"!==a)||(N=w,m-=x[S]-r.height,m*=u?1:-1),i!==T&&(i!==_&&i!==w||"end"!==a)||(O=R,v-=x[L]-r.width,v*=u?1:-1)}var M,P=Object.assign({position:c},f&&G);return u?Object.assign({},P,((M={})[N]=A?"0":"",M[O]=g?"0":"",M.transform=(I.devicePixelRatio||1)<=1?"translate("+v+"px, "+m+"px)":"translate3d("+v+"px, "+m+"px, 0)",M)):Object.assign({},P,((e={})[N]=A?m+"px":"",e[O]=g?v+"px":"",e.transform="",e))}var $={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var n=e.styles[t]||{},r=e.attributes[t]||{},o=e.elements[t];s(o)&&u(o)&&(Object.assign(o.style,n),Object.keys(r).forEach((function(t){var e=r[t];!1===e?o.removeAttribute(t):o.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,n.popper),e.styles=n,e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow),function(){Object.keys(e.elements).forEach((function(t){var r=e.elements[t],o=e.attributes[t]||{},i=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:n[t]).reduce((function(t,e){return t[e]="",t}),{});s(r)&&u(r)&&(Object.assign(r.style,i),Object.keys(o).forEach((function(t){r.removeAttribute(t)})))}))}},requires:["computeStyles"]};var K={left:"right",right:"left",bottom:"top",top:"bottom"};function z(t){return t.replace(/left|right|bottom|top/g,(function(t){return K[t]}))}var q={start:"end",end:"start"};function X(t){return t.replace(/start|end/g,(function(t){return q[t]}))}function Y(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(n&&c(n)){var r=e;do{if(r&&t.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function Q(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function J(t,e){return"viewport"===e?Q(function(t){var e=o(t),n=l(t),r=e.visualViewport,i=n.clientWidth,a=n.clientHeight,s=0,c=0;return r&&(i=r.width,a=r.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(s=r.offsetLeft,c=r.offsetTop)),{width:i,height:a,x:s+f(t),y:c}}(t)):s(e)?function(t){var e=r(t);return e.top=e.top+t.clientTop,e.left=e.left+t.clientLeft,e.bottom=e.top+t.clientHeight,e.right=e.left+t.clientWidth,e.width=t.clientWidth,e.height=t.clientHeight,e.x=e.left,e.y=e.top,e}(e):Q(function(t){var e,n=l(t),r=i(t),o=null==(e=t.ownerDocument)?void 0:e.body,a=U(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),s=U(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),c=-r.scrollLeft+f(t),u=-r.scrollTop;return"rtl"===p(o||n).direction&&(c+=U(n.clientWidth,o?o.clientWidth:0)-a),{width:a,height:s,x:c,y:u}}(l(t)))}function Z(t,e,n){var r="clippingParents"===e?function(t){var e=E(v(t)),n=["absolute","fixed"].indexOf(p(t).position)>=0&&s(t)?b(t):t;return a(n)?e.filter((function(t){return a(t)&&Y(t,n)&&"body"!==u(t)})):[]}(t):[].concat(e),o=[].concat(r,[n]),i=o[0],c=o.reduce((function(e,n){var r=J(t,n);return e.top=U(r.top,e.top),e.right=H(r.right,e.right),e.bottom=H(r.bottom,e.bottom),e.left=U(r.left,e.left),e}),J(t,i));return c.width=c.right-c.left,c.height=c.bottom-c.top,c.x=c.left,c.y=c.top,c}function tt(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function et(t,e){return e.reduce((function(e,n){return e[n]=t,e}),{})}function nt(t,e){void 0===e&&(e={});var n=e,o=n.placement,i=void 0===o?t.placement:o,s=n.boundary,c=void 0===s?"clippingParents":s,u=n.rootBoundary,f=void 0===u?"viewport":u,p=n.elementContext,d=void 0===p?"popper":p,h=n.altBoundary,y=void 0!==h&&h,v=n.padding,E=void 0===v?0:v,m=tt("number"!=typeof E?E:et(E,A)),g="popper"===d?"reference":"popper",b=t.rects.popper,T=t.elements[y?g:d],O=Z(a(T)?T:T.contextElement||l(t.elements.popper),c,f),N=r(t.elements.reference),I=B({reference:N,element:b,strategy:"absolute",placement:i}),x=Q(Object.assign({},b,I)),S="popper"===d?x:N,L={top:O.top-S.top+m.top,bottom:S.bottom-O.bottom+m.bottom,left:O.left-S.left+m.left,right:S.right-O.right+m.right},M=t.modifiersData.offset;if("popper"===d&&M){var P=M[i];Object.keys(L).forEach((function(t){var e=[R,w].indexOf(t)>=0?1:-1,n=[_,w].indexOf(t)>=0?"y":"x";L[t]+=P[n]*e}))}return L}function rt(t,e,n){return U(t,H(e,n))}function ot(t,e,n){return void 0===n&&(n={x:0,y:0}),{top:t.top-e.height-n.y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function it(t){return[_,R,w,T].some((function(e){return t[e]>=0}))}var at=M({defaultModifiers:[j,F,{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,n=t.options,r=n.gpuAcceleration,o=void 0===r||r,i=n.adaptive,a=void 0===i||i,s=n.roundOffsets,c=void 0===s||s,u={placement:C(e.placement),variation:D(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:o};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,V(Object.assign({},u,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:a,roundOffsets:c})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,V(Object.assign({},u,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:c})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}},$,{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,n=t.options,r=t.name,o=n.offset,i=void 0===o?[0,0]:o,a=N.reduce((function(t,n){return t[n]=function(t,e,n){var r=C(t),o=[T,_].indexOf(r)>=0?-1:1,i="function"==typeof n?n(Object.assign({},e,{placement:t})):n,a=i[0],s=i[1];return a=a||0,s=(s||0)*o,[T,R].indexOf(r)>=0?{x:s,y:a}:{x:a,y:s}}(n,e.rects,i),t}),{}),s=a[e.placement],c=s.x,u=s.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=c,e.modifiersData.popperOffsets.y+=u),e.modifiersData[r]=a}},{name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,r=t.name;if(!e.modifiersData[r]._skip){for(var o=n.mainAxis,i=void 0===o||o,a=n.altAxis,s=void 0===a||a,c=n.fallbackPlacements,u=n.padding,l=n.boundary,f=n.rootBoundary,p=n.altBoundary,d=n.flipVariations,h=void 0===d||d,y=n.allowedAutoPlacements,v=e.options.placement,E=C(v),m=c||(E===v||!h?[z(v)]:function(t){if("auto"===C(t))return[];var e=z(t);return[X(t),e,X(e)]}(v)),g=[v].concat(m).reduce((function(t,n){return t.concat("auto"===C(n)?function(t,e){void 0===e&&(e={});var n=e,r=n.placement,o=n.boundary,i=n.rootBoundary,a=n.padding,s=n.flipVariations,c=n.allowedAutoPlacements,u=void 0===c?N:c,l=D(r),f=l?s?O:O.filter((function(t){return D(t)===l})):A,p=f.filter((function(t){return u.indexOf(t)>=0}));0===p.length&&(p=f);var d=p.reduce((function(e,n){return e[n]=nt(t,{placement:n,boundary:o,rootBoundary:i,padding:a})[C(n)],e}),{});return Object.keys(d).sort((function(t,e){return d[t]-d[e]}))}(e,{placement:n,boundary:l,rootBoundary:f,padding:u,flipVariations:h,allowedAutoPlacements:y}):n)}),[]),b=e.rects.reference,I=e.rects.popper,x=new Map,S=!0,L=g[0],M=0;M<g.length;M++){var P=g[M],j=C(P),k="start"===D(P),B=[_,w].indexOf(j)>=0,F=B?"width":"height",U=nt(e,{placement:P,boundary:l,rootBoundary:f,altBoundary:p,padding:u}),H=B?k?R:T:k?w:_;b[F]>I[F]&&(H=z(H));var W=z(H),G=[];if(i&&G.push(U[j]<=0),s&&G.push(U[H]<=0,U[W]<=0),G.every((function(t){return t}))){L=P,S=!1;break}x.set(P,G)}if(S)for(var V=function(t){var e=g.find((function(e){var n=x.get(e);if(n)return n.slice(0,t).every((function(t){return t}))}));if(e)return L=e,"break"},$=h?3:1;$>0;$--){if("break"===V($))break}e.placement!==L&&(e.modifiersData[r]._skip=!0,e.placement=L,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,r=t.name,o=n.mainAxis,i=void 0===o||o,a=n.altAxis,s=void 0!==a&&a,c=n.boundary,u=n.rootBoundary,l=n.altBoundary,f=n.padding,p=n.tether,d=void 0===p||p,h=n.tetherOffset,v=void 0===h?0:h,E=nt(e,{boundary:c,rootBoundary:u,padding:f,altBoundary:l}),m=C(e.placement),g=D(e.placement),A=!g,O=k(m),N="x"===O?"y":"x",I=e.modifiersData.popperOffsets,x=e.rects.reference,S=e.rects.popper,L="function"==typeof v?v(Object.assign({},e.rects,{placement:e.placement})):v,M={x:0,y:0};if(I){if(i||s){var P="y"===O?_:T,j="y"===O?w:R,B="y"===O?"height":"width",F=I[O],W=I[O]+E[P],G=I[O]-E[j],V=d?-S[B]/2:0,$="start"===g?x[B]:S[B],K="start"===g?-S[B]:-x[B],z=e.elements.arrow,q=d&&z?y(z):{width:0,height:0},X=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},Y=X[P],Q=X[j],J=rt(0,x[B],q[B]),Z=A?x[B]/2-V-J-Y-L:$-J-Y-L,tt=A?-x[B]/2+V+J+Q+L:K+J+Q+L,et=e.elements.arrow&&b(e.elements.arrow),ot=et?"y"===O?et.clientTop||0:et.clientLeft||0:0,it=e.modifiersData.offset?e.modifiersData.offset[e.placement][O]:0,at=I[O]+Z-it-ot,st=I[O]+tt-it;if(i){var ct=rt(d?H(W,at):W,F,d?U(G,st):G);I[O]=ct,M[O]=ct-F}if(s){var ut="x"===O?_:T,lt="x"===O?w:R,ft=I[N],pt=ft+E[ut],dt=ft-E[lt],ht=rt(d?H(pt,at):pt,ft,d?U(dt,st):dt);I[N]=ht,M[N]=ht-ft}}e.modifiersData[r]=M}},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,n=t.state,r=t.name,o=t.options,i=n.elements.arrow,a=n.modifiersData.popperOffsets,s=C(n.placement),c=k(s),u=[T,R].indexOf(s)>=0?"height":"width";if(i&&a){var l=function(t,e){return tt("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:et(t,A))}(o.padding,n),f=y(i),p="y"===c?_:T,d="y"===c?w:R,h=n.rects.reference[u]+n.rects.reference[c]-a[c]-n.rects.popper[u],v=a[c]-n.rects.reference[c],E=b(i),m=E?"y"===c?E.clientHeight||0:E.clientWidth||0:0,g=h/2-v/2,O=l[p],N=m-f[u]-l[d],I=m/2-f[u]/2+g,x=rt(O,I,N),S=c;n.modifiersData[r]=((e={})[S]=x,e.centerOffset=x-I,e)}},effect:function(t){var e=t.state,n=t.options.element,r=void 0===n?"[data-popper-arrow]":n;null!=r&&("string"!=typeof r||(r=e.elements.popper.querySelector(r)))&&Y(e.elements.popper,r)&&(e.elements.arrow=r)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,n=t.name,r=e.rects.reference,o=e.rects.popper,i=e.modifiersData.preventOverflow,a=nt(e,{elementContext:"reference"}),s=nt(e,{altBoundary:!0}),c=ot(a,r),u=ot(s,o,i),l=it(c),f=it(u);e.modifiersData[n]={referenceClippingOffsets:c,popperEscapeOffsets:u,isReferenceHidden:l,hasPopperEscaped:f},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":f})}}]}),st='<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>',ct={passive:!0,capture:!0},ut=function(){return document.body};function lt(t,e,n){if(Array.isArray(t)){var r=t[e];return null==r?Array.isArray(n)?n[e]:n:r}return t}function ft(t,e){var n={}.toString.call(t);return 0===n.indexOf("[object")&&n.indexOf(e+"]")>-1}function pt(t,e){return"function"==typeof t?t.apply(void 0,e):t}function dt(t,e){return 0===e?t:function(r){clearTimeout(n),n=setTimeout((function(){t(r)}),e)};var n}function ht(t,e){var n=Object.assign({},t);return e.forEach((function(t){delete n[t]})),n}function yt(t){return[].concat(t)}function vt(t,e){-1===t.indexOf(e)&&t.push(e)}function Et(t){return t.split("-")[0]}function mt(t){return[].slice.call(t)}function gt(t){return Object.keys(t).reduce((function(e,n){return void 0!==t[n]&&(e[n]=t[n]),e}),{})}function bt(){return document.createElement("div")}function _t(t){return["Element","Fragment"].some((function(e){return ft(t,e)}))}function wt(t){return ft(t,"MouseEvent")}function Rt(t){return!(!t||!t._tippy||t._tippy.reference!==t)}function Tt(t){return _t(t)?[t]:function(t){return ft(t,"NodeList")}(t)?mt(t):Array.isArray(t)?t:mt(document.querySelectorAll(t))}function At(t,e){t.forEach((function(t){t&&(t.style.transitionDuration=e+"ms")}))}function Ot(t,e){t.forEach((function(t){t&&t.setAttribute("data-state",e)}))}function Nt(t){var e,n=yt(t)[0];return null!=n&&null!=(e=n.ownerDocument)&&e.body?n.ownerDocument:document}function It(t,e,n){var r=e+"EventListener";["transitionend","webkitTransitionEnd"].forEach((function(e){t[r](e,n)}))}var xt={isTouch:!1},St=0;function Lt(){xt.isTouch||(xt.isTouch=!0,window.performance&&document.addEventListener("mousemove",Mt))}function Mt(){var t=performance.now();t-St<20&&(xt.isTouch=!1,document.removeEventListener("mousemove",Mt)),St=t}function Pt(){var t=document.activeElement;if(Rt(t)){var e=t._tippy;t.blur&&!e.state.isVisible&&t.blur()}}var jt=!!("undefined"!=typeof window&&"undefined"!=typeof document)&&!!window.msCrypto;var Ct={animateFill:!1,followCursor:!1,inlinePositioning:!1,sticky:!1},Dt=Object.assign({appendTo:ut,aria:{content:"auto",expanded:"auto"},delay:0,duration:[300,250],getReferenceClientRect:null,hideOnClick:!0,ignoreAttributes:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,moveTransition:"",offset:[0,10],onAfterUpdate:function(){},onBeforeUpdate:function(){},onCreate:function(){},onDestroy:function(){},onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},onUntrigger:function(){},onClickOutside:function(){},placement:"top",plugins:[],popperOptions:{},render:null,showOnCreate:!1,touch:!0,trigger:"mouseenter focus",triggerTarget:null},Ct,{allowHTML:!1,animation:"fade",arrow:!0,content:"",inertia:!1,maxWidth:350,role:"tooltip",theme:"",zIndex:9999}),kt=Object.keys(Dt);function Bt(t){var e=(t.plugins||[]).reduce((function(e,n){var r,o=n.name,i=n.defaultValue;o&&(e[o]=void 0!==t[o]?t[o]:null!=(r=Dt[o])?r:i);return e}),{});return Object.assign({},t,e)}function Ft(t,e){var n=Object.assign({},e,{content:pt(e.content,[t])},e.ignoreAttributes?{}:function(t,e){return(e?Object.keys(Bt(Object.assign({},Dt,{plugins:e}))):kt).reduce((function(e,n){var r=(t.getAttribute("data-tippy-"+n)||"").trim();if(!r)return e;if("content"===n)e[n]=r;else try{e[n]=JSON.parse(r)}catch(t){e[n]=r}return e}),{})}(t,e.plugins));return n.aria=Object.assign({},Dt.aria,n.aria),n.aria={expanded:"auto"===n.aria.expanded?e.interactive:n.aria.expanded,content:"auto"===n.aria.content?e.interactive?null:"describedby":n.aria.content},n}function Ut(t,e){t.innerHTML=e}function Ht(t){var e=bt();return!0===t?e.className="tippy-arrow":(e.className="tippy-svg-arrow",_t(t)?e.appendChild(t):Ut(e,t)),e}function Wt(t,e){_t(e.content)?(Ut(t,""),t.appendChild(e.content)):"function"!=typeof e.content&&(e.allowHTML?Ut(t,e.content):t.textContent=e.content)}function Gt(t){var e=t.firstElementChild,n=mt(e.children);return{box:e,content:n.find((function(t){return t.classList.contains("tippy-content")})),arrow:n.find((function(t){return t.classList.contains("tippy-arrow")||t.classList.contains("tippy-svg-arrow")})),backdrop:n.find((function(t){return t.classList.contains("tippy-backdrop")}))}}function Vt(t){var e=bt(),n=bt();n.className="tippy-box",n.setAttribute("data-state","hidden"),n.setAttribute("tabindex","-1");var r=bt();function o(n,r){var o=Gt(e),i=o.box,a=o.content,s=o.arrow;r.theme?i.setAttribute("data-theme",r.theme):i.removeAttribute("data-theme"),"string"==typeof r.animation?i.setAttribute("data-animation",r.animation):i.removeAttribute("data-animation"),r.inertia?i.setAttribute("data-inertia",""):i.removeAttribute("data-inertia"),i.style.maxWidth="number"==typeof r.maxWidth?r.maxWidth+"px":r.maxWidth,r.role?i.setAttribute("role",r.role):i.removeAttribute("role"),n.content===r.content&&n.allowHTML===r.allowHTML||Wt(a,t.props),r.arrow?s?n.arrow!==r.arrow&&(i.removeChild(s),i.appendChild(Ht(r.arrow))):i.appendChild(Ht(r.arrow)):s&&i.removeChild(s)}return r.className="tippy-content",r.setAttribute("data-state","hidden"),Wt(r,t.props),e.appendChild(n),n.appendChild(r),o(t.props,t.props),{popper:e,onUpdate:o}}Vt.$$tippy=!0;var $t=1,Kt=[],zt=[];function qt(t,e){var n,r,o,i,a,s,c,u,l=Ft(t,Object.assign({},Dt,Bt(gt(e)))),f=!1,p=!1,d=!1,h=!1,y=[],v=dt(z,l.interactiveDebounce),E=$t++,m=(u=l.plugins).filter((function(t,e){return u.indexOf(t)===e})),g={id:E,reference:t,popper:bt(),popperInstance:null,props:l,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},plugins:m,clearDelayTimeouts:function(){clearTimeout(n),clearTimeout(r),cancelAnimationFrame(o)},setProps:function(e){0;if(g.state.isDestroyed)return;P("onBeforeUpdate",[g,e]),$();var n=g.props,r=Ft(t,Object.assign({},n,gt(e),{ignoreAttributes:!0}));g.props=r,V(),n.interactiveDebounce!==r.interactiveDebounce&&(D(),v=dt(z,r.interactiveDebounce));n.triggerTarget&&!r.triggerTarget?yt(n.triggerTarget).forEach((function(t){t.removeAttribute("aria-expanded")})):r.triggerTarget&&t.removeAttribute("aria-expanded");C(),M(),w&&w(n,r);g.popperInstance&&(Q(),Z().forEach((function(t){requestAnimationFrame(t._tippy.popperInstance.forceUpdate)})));P("onAfterUpdate",[g,e])},setContent:function(t){g.setProps({content:t})},show:function(){0;var t=g.state.isVisible,e=g.state.isDestroyed,n=!g.state.isEnabled,r=xt.isTouch&&!g.props.touch,o=lt(g.props.duration,0,Dt.duration);if(t||e||n||r)return;if(I().hasAttribute("disabled"))return;if(P("onShow",[g],!1),!1===g.props.onShow(g))return;g.state.isVisible=!0,N()&&(_.style.visibility="visible");M(),U(),g.state.isMounted||(_.style.transition="none");if(N()){var i=S(),a=i.box,c=i.content;At([a,c],0)}s=function(){var t;if(g.state.isVisible&&!h){if(h=!0,_.offsetHeight,_.style.transition=g.props.moveTransition,N()&&g.props.animation){var e=S(),n=e.box,r=e.content;At([n,r],o),Ot([n,r],"visible")}j(),C(),vt(zt,g),null==(t=g.popperInstance)||t.forceUpdate(),g.state.isMounted=!0,P("onMount",[g]),g.props.animation&&N()&&function(t,e){W(t,e)}(o,(function(){g.state.isShown=!0,P("onShown",[g])}))}},function(){var t,e=g.props.appendTo,n=I();t=g.props.interactive&&e===ut||"parent"===e?n.parentNode:pt(e,[n]);t.contains(_)||t.appendChild(_);Q(),!1}()},hide:function(){0;var t=!g.state.isVisible,e=g.state.isDestroyed,n=!g.state.isEnabled,r=lt(g.props.duration,1,Dt.duration);if(t||e||n)return;if(P("onHide",[g],!1),!1===g.props.onHide(g))return;g.state.isVisible=!1,g.state.isShown=!1,h=!1,f=!1,N()&&(_.style.visibility="hidden");if(D(),H(),M(),N()){var o=S(),i=o.box,a=o.content;g.props.animation&&(At([i,a],r),Ot([i,a],"hidden"))}j(),C(),g.props.animation?N()&&function(t,e){W(t,(function(){!g.state.isVisible&&_.parentNode&&_.parentNode.contains(_)&&e()}))}(r,g.unmount):g.unmount()},hideWithInteractivity:function(t){0;x().addEventListener("mousemove",v),vt(Kt,v),v(t)},enable:function(){g.state.isEnabled=!0},disable:function(){g.hide(),g.state.isEnabled=!1},unmount:function(){0;g.state.isVisible&&g.hide();if(!g.state.isMounted)return;J(),Z().forEach((function(t){t._tippy.unmount()})),_.parentNode&&_.parentNode.removeChild(_);zt=zt.filter((function(t){return t!==g})),g.state.isMounted=!1,P("onHidden",[g])},destroy:function(){0;if(g.state.isDestroyed)return;g.clearDelayTimeouts(),g.unmount(),$(),delete t._tippy,g.state.isDestroyed=!0,P("onDestroy",[g])}};if(!l.render)return g;var b=l.render(g),_=b.popper,w=b.onUpdate;_.setAttribute("data-tippy-root",""),_.id="tippy-"+g.id,g.popper=_,t._tippy=g,_._tippy=g;var R=m.map((function(t){return t.fn(g)})),T=t.hasAttribute("aria-expanded");return V(),C(),M(),P("onCreate",[g]),l.showOnCreate&&tt(),_.addEventListener("mouseenter",(function(){g.props.interactive&&g.state.isVisible&&g.clearDelayTimeouts()})),_.addEventListener("mouseleave",(function(){g.props.interactive&&g.props.trigger.indexOf("mouseenter")>=0&&x().addEventListener("mousemove",v)})),g;function A(){var t=g.props.touch;return Array.isArray(t)?t:[t,0]}function O(){return"hold"===A()[0]}function N(){var t;return!(null==(t=g.props.render)||!t.$$tippy)}function I(){return c||t}function x(){var t=I().parentNode;return t?Nt(t):document}function S(){return Gt(_)}function L(t){return g.state.isMounted&&!g.state.isVisible||xt.isTouch||i&&"focus"===i.type?0:lt(g.props.delay,t?0:1,Dt.delay)}function M(){_.style.pointerEvents=g.props.interactive&&g.state.isVisible?"":"none",_.style.zIndex=""+g.props.zIndex}function P(t,e,n){var r;(void 0===n&&(n=!0),R.forEach((function(n){n[t]&&n[t].apply(n,e)})),n)&&(r=g.props)[t].apply(r,e)}function j(){var e=g.props.aria;if(e.content){var n="aria-"+e.content,r=_.id;yt(g.props.triggerTarget||t).forEach((function(t){var e=t.getAttribute(n);if(g.state.isVisible)t.setAttribute(n,e?e+" "+r:r);else{var o=e&&e.replace(r,"").trim();o?t.setAttribute(n,o):t.removeAttribute(n)}}))}}function C(){!T&&g.props.aria.expanded&&yt(g.props.triggerTarget||t).forEach((function(t){g.props.interactive?t.setAttribute("aria-expanded",g.state.isVisible&&t===I()?"true":"false"):t.removeAttribute("aria-expanded")}))}function D(){x().removeEventListener("mousemove",v),Kt=Kt.filter((function(t){return t!==v}))}function k(e){if(!xt.isTouch||!d&&"mousedown"!==e.type){var n=e.composedPath&&e.composedPath()[0]||e.target;if(!g.props.interactive||!function(t,e){for(var n=e;n;){var r;if(t.contains(n))return!0;n=null==n.getRootNode||null==(r=n.getRootNode())?void 0:r.host}return!1}(_,n)){if(-1!==yt(g.props.triggerTarget||t).indexOf(n)){if(xt.isTouch)return;if(g.state.isVisible&&g.props.trigger.indexOf("click")>=0)return}else P("onClickOutside",[g,e]);!0===g.props.hideOnClick&&(g.clearDelayTimeouts(),g.hide(),p=!0,setTimeout((function(){p=!1})),g.state.isMounted||H())}}}function B(){d=!0}function F(){d=!1}function U(){var t=x();t.addEventListener("mousedown",k,!0),t.addEventListener("touchend",k,ct),t.addEventListener("touchstart",F,ct),t.addEventListener("touchmove",B,ct)}function H(){var t=x();t.removeEventListener("mousedown",k,!0),t.removeEventListener("touchend",k,ct),t.removeEventListener("touchstart",F,ct),t.removeEventListener("touchmove",B,ct)}function W(t,e){var n=S().box;function r(t){t.target===n&&(It(n,"remove",r),e())}if(0===t)return e();It(n,"remove",a),It(n,"add",r),a=r}function G(e,n,r){void 0===r&&(r=!1),yt(g.props.triggerTarget||t).forEach((function(t){t.addEventListener(e,n,r),y.push({node:t,eventType:e,handler:n,options:r})}))}function V(){var t;O()&&(G("touchstart",K,{passive:!0}),G("touchend",q,{passive:!0})),(t=g.props.trigger,t.split(/\s+/).filter(Boolean)).forEach((function(t){if("manual"!==t)switch(G(t,K),t){case"mouseenter":G("mouseleave",q);break;case"focus":G(jt?"focusout":"blur",X);break;case"focusin":G("focusout",X)}}))}function $(){y.forEach((function(t){var e=t.node,n=t.eventType,r=t.handler,o=t.options;e.removeEventListener(n,r,o)})),y=[]}function K(t){var e,n=!1;if(g.state.isEnabled&&!Y(t)&&!p){var r="focus"===(null==(e=i)?void 0:e.type);i=t,c=t.currentTarget,C(),!g.state.isVisible&&wt(t)&&Kt.forEach((function(e){return e(t)})),"click"===t.type&&(g.props.trigger.indexOf("mouseenter")<0||f)&&!1!==g.props.hideOnClick&&g.state.isVisible?n=!0:tt(t),"click"===t.type&&(f=!n),n&&!r&&et(t)}}function z(t){var e=t.target,n=I().contains(e)||_.contains(e);"mousemove"===t.type&&n||function(t,e){var n=e.clientX,r=e.clientY;return t.every((function(t){var e=t.popperRect,o=t.popperState,i=t.props.interactiveBorder,a=Et(o.placement),s=o.modifiersData.offset;if(!s)return!0;var c="bottom"===a?s.top.y:0,u="top"===a?s.bottom.y:0,l="right"===a?s.left.x:0,f="left"===a?s.right.x:0,p=e.top-r+c>i,d=r-e.bottom-u>i,h=e.left-n+l>i,y=n-e.right-f>i;return p||d||h||y}))}(Z().concat(_).map((function(t){var e,n=null==(e=t._tippy.popperInstance)?void 0:e.state;return n?{popperRect:t.getBoundingClientRect(),popperState:n,props:l}:null})).filter(Boolean),t)&&(D(),et(t))}function q(t){Y(t)||g.props.trigger.indexOf("click")>=0&&f||(g.props.interactive?g.hideWithInteractivity(t):et(t))}function X(t){g.props.trigger.indexOf("focusin")<0&&t.target!==I()||g.props.interactive&&t.relatedTarget&&_.contains(t.relatedTarget)||et(t)}function Y(t){return!!xt.isTouch&&O()!==t.type.indexOf("touch")>=0}function Q(){J();var e=g.props,n=e.popperOptions,r=e.placement,o=e.offset,i=e.getReferenceClientRect,a=e.moveTransition,c=N()?Gt(_).arrow:null,u=i?{getBoundingClientRect:i,contextElement:i.contextElement||I()}:t,l=[{name:"offset",options:{offset:o}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5}},{name:"computeStyles",options:{adaptive:!a}},{name:"$$tippy",enabled:!0,phase:"beforeWrite",requires:["computeStyles"],fn:function(t){var e=t.state;if(N()){var n=S().box;["placement","reference-hidden","escaped"].forEach((function(t){"placement"===t?n.setAttribute("data-placement",e.placement):e.attributes.popper["data-popper-"+t]?n.setAttribute("data-"+t,""):n.removeAttribute("data-"+t)})),e.attributes.popper={}}}}];N()&&c&&l.push({name:"arrow",options:{element:c,padding:3}}),l.push.apply(l,(null==n?void 0:n.modifiers)||[]),g.popperInstance=at(u,_,Object.assign({},n,{placement:r,onFirstUpdate:s,modifiers:l}))}function J(){g.popperInstance&&(g.popperInstance.destroy(),g.popperInstance=null)}function Z(){return mt(_.querySelectorAll("[data-tippy-root]"))}function tt(t){g.clearDelayTimeouts(),t&&P("onTrigger",[g,t]),U();var e=L(!0),r=A(),o=r[0],i=r[1];xt.isTouch&&"hold"===o&&i&&(e=i),e?n=setTimeout((function(){g.show()}),e):g.show()}function et(t){if(g.clearDelayTimeouts(),P("onUntrigger",[g,t]),g.state.isVisible){if(!(g.props.trigger.indexOf("mouseenter")>=0&&g.props.trigger.indexOf("click")>=0&&["mouseleave","mousemove"].indexOf(t.type)>=0&&f)){var e=L(!1);e?r=setTimeout((function(){g.state.isVisible&&g.hide()}),e):o=requestAnimationFrame((function(){g.hide()}))}}else H()}}function Xt(t,e){void 0===e&&(e={});var n=Dt.plugins.concat(e.plugins||[]);document.addEventListener("touchstart",Lt,ct),window.addEventListener("blur",Pt);var r=Object.assign({},e,{plugins:n}),o=Tt(t).reduce((function(t,e){var n=e&&qt(e,r);return n&&t.push(n),t}),[]);return _t(t)?o[0]:o}Xt.defaultProps=Dt,Xt.setDefaultProps=function(t){Object.keys(t).forEach((function(e){Dt[e]=t[e]}))},Xt.currentInput=xt;var Yt=function(t){var e=void 0===t?{}:t,n=e.exclude,r=e.duration;zt.forEach((function(t){var e=!1;if(n&&(e=Rt(n)?t.reference===n:t.popper===n.popper),!e){var o=t.props.duration;t.setProps({duration:r}),t.hide(),t.state.isDestroyed||t.setProps({duration:o})}}))},Qt=Object.assign({},$,{effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};Object.assign(e.elements.popper.style,n.popper),e.styles=n,e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow)}}),Jt=function(t,e){var n;void 0===e&&(e={});var r,o=t,i=[],a=[],s=e.overrides,c=[],u=!1;function l(){a=o.map((function(t){return yt(t.props.triggerTarget||t.reference)})).reduce((function(t,e){return t.concat(e)}),[])}function f(){i=o.map((function(t){return t.reference}))}function p(t){o.forEach((function(e){t?e.enable():e.disable()}))}function d(t){return o.map((function(e){var n=e.setProps;return e.setProps=function(o){n(o),e.reference===r&&t.setProps(o)},function(){e.setProps=n}}))}function h(t,e){var n=a.indexOf(e);if(e!==r){r=e;var c=(s||[]).concat("content").reduce((function(t,e){return t[e]=o[n].props[e],t}),{});t.setProps(Object.assign({},c,{getReferenceClientRect:"function"==typeof c.getReferenceClientRect?c.getReferenceClientRect:function(){return i[n].getBoundingClientRect()}}))}}p(!1),f(),l();var y={fn:function(){return{onDestroy:function(){p(!0)},onHidden:function(){r=null},onClickOutside:function(t){t.props.showOnCreate&&!u&&(u=!0,r=null)},onShow:function(t){t.props.showOnCreate&&!u&&(u=!0,h(t,i[0]))},onTrigger:function(t,e){h(t,e.currentTarget)}}}},v=Xt(bt(),Object.assign({},ht(e,["overrides"]),{plugins:[y].concat(e.plugins||[]),triggerTarget:a,popperOptions:Object.assign({},e.popperOptions,{modifiers:[].concat((null==(n=e.popperOptions)?void 0:n.modifiers)||[],[Qt])})})),E=v.show;v.show=function(t){if(E(),!r&&null==t)return h(v,i[0]);if(!r||null!=t){if("number"==typeof t)return i[t]&&h(v,i[t]);if(o.indexOf(t)>=0){var e=t.reference;return h(v,e)}return i.indexOf(t)>=0?h(v,t):void 0}},v.showNext=function(){var t=i[0];if(!r)return v.show(0);var e=i.indexOf(r);v.show(i[e+1]||t)},v.showPrevious=function(){var t=i[i.length-1];if(!r)return v.show(t);var e=i.indexOf(r),n=i[e-1]||t;v.show(n)};var m=v.setProps;return v.setProps=function(t){s=t.overrides||s,m(t)},v.setInstances=function(t){p(!0),c.forEach((function(t){return t()})),o=t,p(!1),f(),l(),c=d(v),v.setProps({triggerTarget:a})},c=d(v),v},Zt={mouseover:"mouseenter",focusin:"focus",click:"click"};function te(t,e){var n=[],r=[],o=!1,i=e.target,a=ht(e,["target"]),s=Object.assign({},a,{trigger:"manual",touch:!1}),c=Object.assign({},Dt,a,{showOnCreate:!0}),u=Xt(t,s);function l(t){if(t.target&&!o){var n=t.target.closest(i);if(n){var a=n.getAttribute("data-tippy-trigger")||e.trigger||Dt.trigger;if(!n._tippy&&!("touchstart"===t.type&&"boolean"==typeof c.touch||"touchstart"!==t.type&&a.indexOf(Zt[t.type])<0)){var s=Xt(n,c);s&&(r=r.concat(s))}}}}function f(t,e,r,o){void 0===o&&(o=!1),t.addEventListener(e,r,o),n.push({node:t,eventType:e,handler:r,options:o})}return yt(u).forEach((function(t){var e=t.destroy,i=t.enable,a=t.disable;t.destroy=function(t){void 0===t&&(t=!0),t&&r.forEach((function(t){t.destroy()})),r=[],n.forEach((function(t){var e=t.node,n=t.eventType,r=t.handler,o=t.options;e.removeEventListener(n,r,o)})),n=[],e()},t.enable=function(){i(),r.forEach((function(t){return t.enable()})),o=!1},t.disable=function(){a(),r.forEach((function(t){return t.disable()})),o=!0},function(t){var e=t.reference;f(e,"touchstart",l,ct),f(e,"mouseover",l),f(e,"focusin",l),f(e,"click",l)}(t)})),u}var ee={name:"animateFill",defaultValue:!1,fn:function(t){var e;if(null==(e=t.props.render)||!e.$$tippy)return{};var n=Gt(t.popper),r=n.box,o=n.content,i=t.props.animateFill?function(){var t=bt();return t.className="tippy-backdrop",Ot([t],"hidden"),t}():null;return{onCreate:function(){i&&(r.insertBefore(i,r.firstElementChild),r.setAttribute("data-animatefill",""),r.style.overflow="hidden",t.setProps({arrow:!1,animation:"shift-away"}))},onMount:function(){if(i){var t=r.style.transitionDuration,e=Number(t.replace("ms",""));o.style.transitionDelay=Math.round(e/10)+"ms",i.style.transitionDuration=t,Ot([i],"visible")}},onShow:function(){i&&(i.style.transitionDuration="0ms")},onHide:function(){i&&Ot([i],"hidden")}}}};var ne={clientX:0,clientY:0},re=[];function oe(t){var e=t.clientX,n=t.clientY;ne={clientX:e,clientY:n}}var ie={name:"followCursor",defaultValue:!1,fn:function(t){var e=t.reference,n=Nt(t.props.triggerTarget||e),r=!1,o=!1,i=!0,a=t.props;function s(){return"initial"===t.props.followCursor&&t.state.isVisible}function c(){n.addEventListener("mousemove",f)}function u(){n.removeEventListener("mousemove",f)}function l(){r=!0,t.setProps({getReferenceClientRect:null}),r=!1}function f(n){var r=!n.target||e.contains(n.target),o=t.props.followCursor,i=n.clientX,a=n.clientY,s=e.getBoundingClientRect(),c=i-s.left,u=a-s.top;!r&&t.props.interactive||t.setProps({getReferenceClientRect:function(){var t=e.getBoundingClientRect(),n=i,r=a;"initial"===o&&(n=t.left+c,r=t.top+u);var s="horizontal"===o?t.top:r,l="vertical"===o?t.right:n,f="horizontal"===o?t.bottom:r,p="vertical"===o?t.left:n;return{width:l-p,height:f-s,top:s,right:l,bottom:f,left:p}}})}function p(){t.props.followCursor&&(re.push({instance:t,doc:n}),function(t){t.addEventListener("mousemove",oe)}(n))}function d(){0===(re=re.filter((function(e){return e.instance!==t}))).filter((function(t){return t.doc===n})).length&&function(t){t.removeEventListener("mousemove",oe)}(n)}return{onCreate:p,onDestroy:d,onBeforeUpdate:function(){a=t.props},onAfterUpdate:function(e,n){var i=n.followCursor;r||void 0!==i&&a.followCursor!==i&&(d(),i?(p(),!t.state.isMounted||o||s()||c()):(u(),l()))},onMount:function(){t.props.followCursor&&!o&&(i&&(f(ne),i=!1),s()||c())},onTrigger:function(t,e){wt(e)&&(ne={clientX:e.clientX,clientY:e.clientY}),o="focus"===e.type},onHidden:function(){t.props.followCursor&&(l(),u(),i=!0)}}}};var ae={name:"inlinePositioning",defaultValue:!1,fn:function(t){var e,n=t.reference;var r=-1,o=!1,i=[],a={name:"tippyInlinePositioning",enabled:!0,phase:"afterWrite",fn:function(o){var a=o.state;t.props.inlinePositioning&&(-1!==i.indexOf(a.placement)&&(i=[]),e!==a.placement&&-1===i.indexOf(a.placement)&&(i.push(a.placement),t.setProps({getReferenceClientRect:function(){return function(t){return function(t,e,n,r){if(n.length<2||null===t)return e;if(2===n.length&&r>=0&&n[0].left>n[1].right)return n[r]||e;switch(t){case"top":case"bottom":var o=n[0],i=n[n.length-1],a="top"===t,s=o.top,c=i.bottom,u=a?o.left:i.left,l=a?o.right:i.right;return{top:s,bottom:c,left:u,right:l,width:l-u,height:c-s};case"left":case"right":var f=Math.min.apply(Math,n.map((function(t){return t.left}))),p=Math.max.apply(Math,n.map((function(t){return t.right}))),d=n.filter((function(e){return"left"===t?e.left===f:e.right===p})),h=d[0].top,y=d[d.length-1].bottom;return{top:h,bottom:y,left:f,right:p,width:p-f,height:y-h};default:return e}}(Et(t),n.getBoundingClientRect(),mt(n.getClientRects()),r)}(a.placement)}})),e=a.placement)}};function s(){var e;o||(e=function(t,e){var n;return{popperOptions:Object.assign({},t.popperOptions,{modifiers:[].concat(((null==(n=t.popperOptions)?void 0:n.modifiers)||[]).filter((function(t){return t.name!==e.name})),[e])})}}(t.props,a),o=!0,t.setProps(e),o=!1)}return{onCreate:s,onAfterUpdate:s,onTrigger:function(e,n){if(wt(n)){var o=mt(t.reference.getClientRects()),i=o.find((function(t){return t.left-2<=n.clientX&&t.right+2>=n.clientX&&t.top-2<=n.clientY&&t.bottom+2>=n.clientY})),a=o.indexOf(i);r=a>-1?a:r}},onHidden:function(){r=-1}}}};var se={name:"sticky",defaultValue:!1,fn:function(t){var e=t.reference,n=t.popper;function r(e){return!0===t.props.sticky||t.props.sticky===e}var o=null,i=null;function a(){var s=r("reference")?(t.popperInstance?t.popperInstance.state.elements.reference:e).getBoundingClientRect():null,c=r("popper")?n.getBoundingClientRect():null;(s&&ce(o,s)||c&&ce(i,c))&&t.popperInstance&&t.popperInstance.update(),o=s,i=c,t.state.isMounted&&requestAnimationFrame(a)}return{onMount:function(){t.props.sticky&&a()}}}};function ce(t,e){return!t||!e||(t.top!==e.top||t.right!==e.right||t.bottom!==e.bottom||t.left!==e.left)}Xt.setDefaultProps({render:Vt});e.default=Xt},function(t,e,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),a=[];function s(t){for(var e=-1,n=0;n<a.length;n++)if(a[n].identifier===t){e=n;break}return e}function c(t,e){for(var n={},r=[],o=0;o<t.length;o++){var i=t[o],c=e.base?i[0]+e.base:i[0],u=n[c]||0,l="".concat(c," ").concat(u);n[c]=u+1;var f=s(l),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(p)):a.push({identifier:l,updater:v(p,e),references:1}),r.push(l)}return r}function u(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var l,f=(l=[],function(t,e){return l[t]=e,l.filter(Boolean).join("\n")});function p(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=f(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function d(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var h=null,y=0;function v(t,e){var n,r,o;if(e.singleton){var i=y++;n=h||(h=u(e)),r=p.bind(null,n,i,!1),o=p.bind(null,n,i,!0)}else n=u(e),r=d.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var n=c(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=s(n[r]);a[o].references--}for(var i=c(t,e),u=0;u<n.length;u++){var l=s(n[u]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}n=i}}}},function(t,e,n){"use strict";function r(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null==n)return;var r,o,i=[],a=!0,s=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(t){s=!0,o=t}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var e=r(t,4),n=e[1],o=e[3];if(!o)return n;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(a," */"),c=o.sources.map((function(t){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(t," */")}));return[n].concat(c).concat([s]).join("\n")}return[n].join("\n")}},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},function(t,e,n){var r=n(18),o=n(53),i=n(57),a=n(59),s=n(60),c=n(62),u=Date.prototype.getTime;function l(t,e,n){var d=n||{};return!!(d.strict?i(t,e):t===e)||(!t||!e||"object"!=typeof t&&"object"!=typeof e?d.strict?i(t,e):t==e:function(t,e,n){var i,d;if(typeof t!=typeof e)return!1;if(f(t)||f(e))return!1;if(t.prototype!==e.prototype)return!1;if(o(t)!==o(e))return!1;var h=a(t),y=a(e);if(h!==y)return!1;if(h||y)return t.source===e.source&&s(t)===s(e);if(c(t)&&c(e))return u.call(t)===u.call(e);var v=p(t),E=p(e);if(v!==E)return!1;if(v||E){if(t.length!==e.length)return!1;for(i=0;i<t.length;i++)if(t[i]!==e[i])return!1;return!0}if(typeof t!=typeof e)return!1;try{var m=r(t),g=r(e)}catch(t){return!1}if(m.length!==g.length)return!1;for(m.sort(),g.sort(),i=m.length-1;i>=0;i--)if(m[i]!=g[i])return!1;for(i=m.length-1;i>=0;i--)if(d=m[i],!l(t[d],e[d],n))return!1;return!0}(t,e,d))}function f(t){return null==t}function p(t){return!(!t||"object"!=typeof t||"number"!=typeof t.length)&&("function"==typeof t.copy&&"function"==typeof t.slice&&!(t.length>0&&"number"!=typeof t[0]))}t.exports=l},,,function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((r=r.apply(t,e||[])).next())}))},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.MarkdownView=void 0;const i=o(n(13)),a=n(36),s=n(41),c=n(42),u=n(0),l=n(1),f=n(44),p=n(45),d=n(67);class h extends i.default{constructor(){super(),this.ready=this.init(),new f.NoteRouter(this),new a.ElementReferrerListBuilder(this),new s.NoteReferrerListBuilder(this),new c.CopyAnchorBuilder(this),new p.LinkPreviewer(this),new d.IconBuilder(this)}init(){return r(this,void 0,void 0,(function*(){this.expandMode=yield webviewApi.postMessage(u.MARKDOWN_SCRIPT_ID,{event:"querySetting",payload:{key:u.REFERRER_VIEW_REFERENCE_EXPAND_SETTING}});const t=yield webviewApi.postMessage(u.MARKDOWN_SCRIPT_ID,{event:"queryCurrentNote"});this.currentNoteId=t.id;let e,n=1;this.emit(l.MarkdownViewEvents.NewNoteOpen),this.emit(l.MarkdownViewEvents.NoteDidUpdate,t),this.initGlobalStyle(),document.addEventListener("joplin-noteDidUpdate",()=>r(this,void 0,void 0,(function*(){e&&clearTimeout(e);const t=yield webviewApi.postMessage(u.MARKDOWN_SCRIPT_ID,{event:"queryCurrentNote"});t.id===this.currentNoteId?(n++,n>=2&&(2===n&&this.emit(l.MarkdownViewEvents.NewNoteOpen),this.emit(l.MarkdownViewEvents.NoteDidUpdate,t))):(e&&clearTimeout(e),this.currentNoteId=t.id,n=1,e=setTimeout(()=>{this.emit(l.MarkdownViewEvents.NewNoteOpen),this.emit(l.MarkdownViewEvents.NoteDidUpdate,t)},2e3))})))}))}initGlobalStyle(){const t=`.tippy-box[data-theme^="note-link-"] { background-color: ${function(){let t=document.getElementById(l.ROOT_ELEMENT_ID),e=getComputedStyle(t).backgroundColor;for(;"rgba(0, 0, 0, 0)"===e&&t.parentElement;)t=t.parentElement,e=getComputedStyle(t).backgroundColor;return e}()}}`,e=document.createElement("style");e.innerHTML=t,document.head.appendChild(e)}}e.MarkdownView=h,new h},function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.hasOwnProperty.call(t,n)&&r(e,t,n);return o(e,t),e},a=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((r=r.apply(t,e||[])).next())}))},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ElementReferrerListBuilder=void 0;const c=i(n(28)),u=s(n(4)),l=s(n(14));n(39);const f=s(n(40)),p=n(0),d=n(1),h=n(16);function y(t,e,n){t.appendChild(e),c.default(e,{duration:[300,0],content:n,interactive:!0,placement:"right",arrow:c.roundArrow,appendTo:()=>document.querySelector("#"+d.ROOT_ELEMENT_ID),trigger:"click",theme:"note-link-referrers",popperOptions:{modifiers:[{name:"flip",options:{fallbackPlacements:["top","bottom","right"]}}]}})}class v{constructor(t){this.view=t,this.ready=this.init()}init(){return a(this,void 0,void 0,(function*(){const t=u.default(this.attachReferrers.bind(this),500);this.view.on(d.MarkdownViewEvents.NoteDidUpdate,t),this.view.on(d.MarkdownViewEvents.NewNoteOpen,()=>this.referrersMap=void 0),this.maxTextLength=yield webviewApi.postMessage(p.MARKDOWN_SCRIPT_ID,{event:"querySetting",payload:{key:p.REFERRER_ELEMENT_MENTION_TEXT_MAX_LENGTH}}),this.enabled=yield webviewApi.postMessage(p.MARKDOWN_SCRIPT_ID,{event:"querySetting",payload:{key:p.REFERRER_ELEMENT_NUMBER_ENABLED}}),this.numberType=yield webviewApi.postMessage(p.MARKDOWN_SCRIPT_ID,{event:"querySetting",payload:{key:p.REFERRER_ELEMENT_NUMBER_TYPE}}),this.enabled||this.view.off(d.MarkdownViewEvents.NoteDidUpdate,t)}))}attachReferrers(){return a(this,void 0,void 0,(function*(){if(yield this.ready,this.enabled){if(yield this.updateReferrersMap(),!this.referrersMap)throw new Error("no referrers map");for(const t of Object.keys(this.referrersMap)){const e=document.getElementById(t);if(!e)continue;const n=this.referrersMap[t];y(e,this.createReferrerIconElement(n),this.createReferrerListElement(n,t))}}}))}updateReferrersMap(){return a(this,void 0,void 0,(function*(){if(this.referrersMap)return;const t=[...document.getElementById(d.ROOT_ELEMENT_ID).querySelectorAll("[id]")].filter(t=>!h.isIgnoredIdElement(t)).map(({id:t})=>t);this.referrersMap=yield webviewApi.postMessage(p.MARKDOWN_SCRIPT_ID,{event:"searchReferrers",payload:{type:"note",elementIds:t}})}))}createReferrerIconElement(t){const e=document.createElement("span");e.classList.add("note-link-element-referrers-icon");const n=(()=>{const e=t.map(({mentions:t})=>t.length).reduce((t,e)=>t+e,0),n=t.length;return this.numberType===d.ReferrersListNumberType.ReferencesCount?e:this.numberType===d.ReferrersListNumberType.ReferrersCount?n:this.numberType===d.ReferrersListNumberType.Both?`${n}(${e})`:void 0})();return e.innerHTML=`${n}${f.default}`,e}createReferrerListElement(t,e){if(void 0===this.view.expandMode)throw new Error("no expand mode");const n=document.createElement("ol");return n.classList.add("note-link-element-referrers-list"),n.innerHTML=v.renderList({notes:t,currentNoteId:this.view.currentNoteId,textLength:this.maxTextLength,elId:e,expand:[d.ReferenceListExpandMode.ExpandBoth,d.ReferenceListExpandMode.ExpandElementListOnly].includes(this.view.expandMode)}),n}}e.ElementReferrerListBuilder=v,v.renderList=l.default(`\n    <% for (const note of notes) { %>\n      <li>\n        <% if (textLength) { %>\n        <details<%= expand ? ' open' : '' %>>\n          <summary class="${d.REFERRER_TITLE_CONTAINER_CLASS_NAME}">\n        <% } %>\n            <a \n              <%= currentNoteId === note.id ? 'data-is-self' : '' %>\n              data-note-link-referrer-id="<%= note.id %>"\n              class="${d.REFERRER_TITLE_CLASS_NAME}"\n            >\n              <%= note.title %>\n            </a>\n            <span\n              title="<%= note.mentions.length %> reference<%= note.mentions.length > 1 ? 's' : '' %> from this note"\n              class="note-link-element-referrer-count"\n            >\n              <%= note.mentions.length %>\n            </span>\n        <% if (textLength) { %>\n          </summary>\n          <ol>\n            <% for (const [index, mention] of note.mentions.entries()) { %>\n              <li class="${d.REFERENCE_ITEM_CLASS_NAME}">\n                <a\n                  class="${d.REFERENCE_CLASS_NAME}"\n                  data-note-link-referrer-id="<%= note.id %>"\n                  data-note-link-reference-index="<%= index + 1 %>"\n                  data-note-link-to-element-id="<%= elId  %>"\n                  <%= currentNoteId === note.id ? 'data-is-self' : '' %>\n                >\n                    <%= mention %>\n                </a>\n              </li>\n            <% } %>\n          </ol>\n        </details>\n        <% } %>\n      </li>\n    <% } %>\n  `)},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){(function(e){var r=n(15),o=/[&<>"']/g,i=RegExp(o.source),a="object"==typeof e&&e&&e.Object===Object&&e,s="object"==typeof self&&self&&self.Object===Object&&self,c=a||s||Function("return this")();var u,l=(u={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},function(t){return null==u?void 0:u[t]}),f=Object.prototype,p=f.hasOwnProperty,d=f.toString,h=c.Symbol,y=h?h.toStringTag:void 0,v=h?h.prototype:void 0,E=v?v.toString:void 0,m={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:r,variable:"",imports:{_:{escape:function(t){return(t=w(t))&&i.test(t)?t.replace(o,l):t}}}};function g(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":y&&y in Object(t)?function(t){var e=p.call(t,y),n=t[y];try{t[y]=void 0;var r=!0}catch(t){}var o=d.call(t);r&&(e?t[y]=n:delete t[y]);return o}(t):function(t){return d.call(t)}(t)}function b(t){if("string"==typeof t)return t;if(_(t))return function(t,e){for(var n=-1,r=null==t?0:t.length,o=Array(r);++n<r;)o[n]=e(t[n],n,t);return o}(t,b)+"";if(function(t){return"symbol"==typeof t||function(t){return null!=t&&"object"==typeof t}(t)&&"[object Symbol]"==g(t)}(t))return E?E.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}var _=Array.isArray;function w(t){return null==t?"":b(t)}t.exports=m}).call(this,n(7))},function(t,e,n){"use strict";n.r(e);var r=n(29),o=n.n(r),i=n(12),a={insert:"head",singleton:!1};o()(i.a,a);e.default=i.a.locals||{}},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-box-arrow-in-down-left" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M9.636 2.5a.5.5 0 0 0-.5-.5H2.5A1.5 1.5 0 0 0 1 3.5v10A1.5 1.5 0 0 0 2.5 15h10a1.5 1.5 0 0 0 1.5-1.5V6.864a.5.5 0 0 0-1 0V13.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"></path><path fill-rule="evenodd" d="M5 10.5a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 0-1H6.707l8.147-8.146a.5.5 0 0 0-.708-.708L6 9.293V5.5a.5.5 0 0 0-1 0v5z"></path></svg>'},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((r=r.apply(t,e||[])).next())}))},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.NoteReferrerListBuilder=void 0;const i=o(n(4)),a=o(n(14)),s=n(0),c=n(1);class u{constructor(t){this.view=t,this.ready=this.init()}init(){return r(this,void 0,void 0,(function*(){this.view.on(c.MarkdownViewEvents.NewNoteOpen,()=>this.referrers=void 0),this.view.on(c.MarkdownViewEvents.NoteDidUpdate,i.default(this.insert.bind(this),500)),this.maxTextLength=yield webviewApi.postMessage(s.MARKDOWN_SCRIPT_ID,{event:"querySetting",payload:{key:s.REFERRER_LIST_MENTION_TEXT_MAX_LENGTH}}),this.listPosition=yield webviewApi.postMessage(s.MARKDOWN_SCRIPT_ID,{event:"querySetting",payload:{key:s.REFERRER_AUTO_LIST_POSITION_SETTING}}),this.listHeadingText=yield webviewApi.postMessage(s.MARKDOWN_SCRIPT_ID,{event:"querySetting",payload:{key:s.REFERRER_LIST_HEADING_SETTING}})}))}insert(){return r(this,void 0,void 0,(function*(){if(yield this.ready,void 0===this.listPosition||void 0===this.listHeadingText)throw new Error("can not auto insert");const t=this.prepareHeadings();0!==t.length&&(this.referrers||(this.referrers=yield webviewApi.postMessage(s.MARKDOWN_SCRIPT_ID,{event:"searchReferrers",payload:{type:"note"}})),this.insertListAfterHeadings(t))}))}prepareHeadings(){if(void 0===this.listHeadingText||void 0===this.listPosition)throw new Error("can not auto insert");if(!this.listHeadingText)return[];const t=document.getElementById(c.ROOT_ELEMENT_ID),e=[...t.querySelectorAll("h1,h2,h3,h4,h5,h6")],n=e.filter(t=>t.innerText===this.listHeadingText);if(0===n.length&&this.listPosition!==c.ReferrersAutoListPosition.None){const r=Math.min(...e.map(t=>Number(t.tagName[1]))),o=document.createElement("h"+(Number.isFinite(r)?r:1));o.innerText=this.listHeadingText,n.push(o),t.insertAdjacentElement(this.listPosition===c.ReferrersAutoListPosition.Top?"afterbegin":"beforeend",o)}return n}insertListAfterHeadings(t){return r(this,void 0,void 0,(function*(){if(!this.referrers||void 0===this.view.expandMode)throw new Error("can not insert list");const e=this.referrers.length>0,n=u.renderList({currentNoteId:this.view.currentNoteId,notes:this.referrers,textLength:this.maxTextLength,expand:[c.ReferenceListExpandMode.ExpandBoth,c.ReferenceListExpandMode.ExpandNoteListOnly].includes(this.view.expandMode)});for(const r of t){const t=e?document.createElement("ol"):document.createElement("p");t.innerHTML=e?n:"<p>No referrers.</p>",r.classList.add("note-link-referrers-list-heading"),r.insertAdjacentElement("afterend",t)}}))}}e.NoteReferrerListBuilder=u,u.renderList=a.default(`\n    <% for (const note of notes) { %>\n      <li>\n        <% if (textLength) { %>\n        <details<%= expand ? ' open' : '' %>>\n          <summary class="${c.REFERRER_TITLE_CONTAINER_CLASS_NAME}">\n        <% } %>\n            <a \n              data-note-link-referrer-id="<%= note.id %>"\n              <%= currentNoteId === note.id ? 'data-is-self' : '' %>\n              class="${c.REFERRER_TITLE_CLASS_NAME}"\n            >\n              <span class="resource-icon fa-joplin"></span>\n              <%= note.title  %>\n            </a>\n            <span\n              title="<%= note.mentions.length %> reference<%= note.mentions.length > 1 ? 's' : '' %> from this note"\n              class="note-link-referrers-list-count"\n            >\n              <%= note.mentions.length %>\n            </span>\n        <% if (textLength) { %>\n          </summary>\n          <ol>\n            <% for (const [index, mention] of note.mentions.entries()) { %>\n              <li class="${c.REFERENCE_ITEM_CLASS_NAME}">\n                <a\n                  class="${c.REFERENCE_CLASS_NAME}"\n                  data-note-link-referrer-id="<%= note.id %>"\n                  data-note-link-reference-index="<%= index + 1 %>"\n                  <%= currentNoteId === note.id ? 'data-is-self' : '' %>\n                > <%= mention %></a>\n              </li>\n            <% } %>\n          </ol>\n        </details>\n        <% } %>\n      </li>\n    <% } %>\n  `)},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((r=r.apply(t,e||[])).next())}))},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.CopyAnchorBuilder=void 0;const i=o(n(8)),a=o(n(4)),s=o(n(17)),c=n(0),u=n(1),l=n(16);e.CopyAnchorBuilder=class{constructor(t){this.view=t,this.ready=this.init()}init(){return r(this,void 0,void 0,(function*(){i.default(".note-link-identifier","click",t=>{const e=t.delegateTarget;this.copyUrl(e),t.stopPropagation(),t.preventDefault()},!0),i.default(".note-link-identifier","contextmenu",t=>{const e=t.delegateTarget;this.copyUrl(e,!0),t.stopPropagation(),t.preventDefault()},!0),i.default(".note-link-identifier","mouseover",this.handleMouseMove),i.default(".note-link-identifier","mouseout",this.handleMouseMove);const t=a.default(this.attach.bind(this),500);this.view.on(u.MarkdownViewEvents.NoteDidUpdate,t),this.view.on(u.MarkdownViewEvents.NoteDidUpdate,t=>{this.currentNote=t}),this.enabled=yield webviewApi.postMessage(c.MARKDOWN_SCRIPT_ID,{event:"querySetting",payload:{key:c.REFERRER_IDENTIFIER_ENABLED_SETTING}}),this.enabled||this.view.off(u.MarkdownViewEvents.NoteDidUpdate,t)}))}copyUrl(t,e=!1){return r(this,void 0,void 0,(function*(){if(!this.currentNote)throw new Error("no currentNote");const{id:n,title:r}=this.currentNote,o=t.dataset.noteLinkElementId;webviewApi.postMessage(c.MARKDOWN_SCRIPT_ID,{event:"writeClipboard",payload:{content:e?`:/${n}#${o}`:`[${r}#${o}](:/${n}#${o})`}})}))}attach(){return r(this,void 0,void 0,(function*(){if(yield this.ready,!this.enabled)return;const t=[...document.getElementById(u.ROOT_ELEMENT_ID).querySelectorAll("[id]")];for(const e of t){if(l.isIgnoredIdElement(e))continue;const t=document.createElement("button");t.classList.add("note-link-identifier"),t.dataset.noteLinkElementId=e.id,t.innerHTML=s.default,t.title=e.id,e.prepend(t)}}))}handleMouseMove(t){const e=t.delegateTarget.parentElement;e&&e.classList.toggle("note-link-identifier-parent")}}},function(t,e){if("undefined"!=typeof Element&&!Element.prototype.matches){var n=Element.prototype;n.matches=n.matchesSelector||n.mozMatchesSelector||n.msMatchesSelector||n.oMatchesSelector||n.webkitMatchesSelector}t.exports=function(t,e){for(;t&&9!==t.nodeType;){if("function"==typeof t.matches&&t.matches(e))return t;t=t.parentNode}}},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((r=r.apply(t,e||[])).next())}))},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.NoteRouter=e.OVERFLOW_ANCHOR_NONE_CLASS_NAME=void 0;const i=o(n(8)),a=n(0),s=n(1);e.OVERFLOW_ANCHOR_NONE_CLASS_NAME="note-link-overflow-anchor-none";e.NoteRouter=class{constructor(t){i.default("[data-note-link-referrer-id]","click",this.handleReferrerClick.bind(this)),i.default(`.${a.MAIN_MARK_CLASS_NAME} [data-note-link-element-id] `,"click",this.handleMarkClick.bind(this),!0),t.on(s.MarkdownViewEvents.NewNoteOpen,()=>this.scrollToReference())}handleReferrerClick(t){const e=t.delegateTarget,n=e.dataset.noteLinkReferrerId,r=Number(e.dataset.noteLinkReferenceIndex),o=e.dataset.noteLinkToElementId,i="string"==typeof e.dataset.isSelf;if(!n)throw new Error("no noteId");i&&r?this.scrollToReference({toElementId:o,index:r,toNoteId:n}):webviewApi.postMessage(a.MARKDOWN_SCRIPT_ID,{event:"openNote",payload:{noteId:n,reference:r?{index:r,toElementId:o}:void 0}})}scrollToReference(t){return r(this,void 0,void 0,(function*(){this.recoveryIdTimer&&clearTimeout(this.recoveryIdTimer);const n=t||(yield webviewApi.postMessage(a.MARKDOWN_SCRIPT_ID,{event:"queryFromReference"}));if(!n)return;const{index:r,toElementId:o,toNoteId:i}=n,c=o?`${i}#${o}`:i;if(!c)throw new Error("no url when locating reference");const u=[...document.querySelectorAll("a[data-from-md][data-resource-id][onclick]")].filter(t=>{var e;return null===(e=t.onclick)||void 0===e?void 0:e.toString().includes(c)})[r-1];if(!u)throw new Error("can not find referenceEl");const l=u.id;u.id=s.SCROLL_ANCHOR_ID;const f=document.getElementById("joplin-container-content");f.classList.add(e.OVERFLOW_ANCHOR_NONE_CLASS_NAME),yield webviewApi.postMessage(a.MARKDOWN_SCRIPT_ID,{event:"scrollToHash",payload:{hash:s.SCROLL_ANCHOR_ID}}),this.recoveryIdTimer=setTimeout(()=>{f.classList.remove(e.OVERFLOW_ANCHOR_NONE_CLASS_NAME),l?u.id=l:u.removeAttribute("id")},3e3)}))}handleMarkClick(t){t.stopPropagation();const e=t.delegateTarget.dataset.noteLinkElementId;if(!e)throw new Error("no element id");document.getElementById(e)?webviewApi.postMessage(a.MARKDOWN_SCRIPT_ID,{event:"scrollToHash",payload:{hash:e}}):alert("No such id in current note: "+e)}}},function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.hasOwnProperty.call(t,n)&&r(e,t,n);return o(e,t),e},a=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((r=r.apply(t,e||[])).next())}))},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.LinkPreviewer=void 0;const c=i(n(28)),u=s(n(8)),l=s(n(46)),f=n(0),p=n(1),d=n(64),h=n(27),y=n(6);e.LinkPreviewer=class{constructor(t){this.markdownView=t,this.pinnedTooltips=new Map,this.zIndex=1,this.init()}init(){return a(this,void 0,void 0,(function*(){this.markdownView.on(p.MarkdownViewEvents.NewNoteOpen,()=>this.pinnedTooltips.clear());(yield webviewApi.postMessage(f.MARKDOWN_SCRIPT_ID,{event:"querySetting",payload:{key:f.PREVIEWER_ENABLED_SETTING}}))&&(this.urlBlackList=(yield webviewApi.postMessage(f.MARKDOWN_SCRIPT_ID,{event:"querySetting",payload:{key:f.PREVIEWER_URL_BLACKLIST_SETTING}})).split(","),this.urlMatcher=new l.default(this.urlBlackList),this.hoverDelay=yield webviewApi.postMessage(f.MARKDOWN_SCRIPT_ID,{event:"querySetting",payload:{key:f.PREVIEWER_HOVER_DELAY_SETTING}}),u.default("a","mouseover",t=>this.preview(t.delegateTarget)),u.default("a","mouseout",()=>this.cancelPreview()),u.default(".note-link-previewer-pinned","click",t=>t.delegateTarget.style.zIndex=""+this.zIndex++))}))}cancelPreview(){return a(this,void 0,void 0,(function*(){this.tooltipTimer&&(clearTimeout(this.tooltipTimer),this.tooltipTimer=void 0)}))}preview(t){var e;return a(this,void 0,void 0,(function*(){if(t.matches(".note-link-previewer *"))return;if(this.pinnedTooltips.has(t)){return void(this.pinnedTooltips.get(t).popper.style.zIndex=""+this.zIndex++)}const n=t.getAttribute("href");if(!n)return;if(!n.startsWith("#")){const t=y.getRemoteUrl(n);if(this.urlMatcher.test(t))return;this.activeBox=new d.RemoteBox(t)}else{if(null===(e=this.urlBlackList)||void 0===e?void 0:e.includes(f.PREVIEWER_URL_BLACKLIST_LOCAL))return;if(!this.markdownView.currentNoteId)throw new Error("no currentNoteId");const n=h.parseUrlFromLinkEl(t,this.markdownView.currentNoteId);if(!n||t.classList.contains(p.REFERENCE_CLASS_NAME))return;this.activeBox=new d.LocalBox(n)}this.activeBox.on(d.BoxEvents.Pinned,()=>this.pinTooltip(t)),this.activeBox.on(d.BoxEvents.Unpinned,()=>this.unpinTooltip(t)),this.createTooltip(t)}))}pinTooltip(t){if(!this.tooltip||!this.activeBox)throw new Error("no tooltip");this.pinnedTooltips.set(t,this.tooltip),this.tooltip.popper.classList.add("note-link-previewer-pinned"),this.tooltip.setProps({placement:this.tooltip.popperInstance.state.placement}),this.tooltip.popperInstance.setOptions(t=>Object.assign(Object.assign({},t),{modifiers:[...t.modifiers,{name:"flip",enabled:!1}]})),this.tooltip.popper.style.zIndex=""+this.zIndex++,this.tooltip=void 0}unpinTooltip(t){const e=this.pinnedTooltips.get(t);if(!e)throw new Error("no box");this.pinnedTooltips.delete(t),e.destroy()}createTooltip(t){this.tooltip&&![...this.pinnedTooltips.values()].includes(this.tooltip)&&(!this.tooltip.state.isDestroyed&&this.tooltip.destroy(),this.tooltip=void 0);const e=()=>{this.cancelPreview(),t.removeEventListener("click",e)};t.addEventListener("click",e),this.tooltipTimer=setTimeout(()=>{if(!this.activeBox)throw new Error("no box");this.tooltipTimer=void 0,this.tooltip=c.default(t,{duration:[300,0],content:this.activeBox.containerEl,theme:"note-link-previewer",interactive:!0,placement:"top",arrow:c.roundArrow,interactiveBorder:30,showOnCreate:!0,trigger:"mouseenter",appendTo:()=>document.getElementById(p.ROOT_ELEMENT_ID),onHidden:t=>t.destroy(),onHide:()=>!this.pinnedTooltips.has(t)&&void 0,popperOptions:{modifiers:[{name:"flip",options:{fallbackPlacements:["bottom"]}},{name:"preventOverflow",options:{tether:!1,boundary:document.getElementById(p.ROOT_ELEMENT_ID)}}]}}),window.requestAnimationFrame(()=>{this.activeBox instanceof d.LocalBox&&this.activeBox.scrollToElement()})},this.hoverDelay)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(47),i=(r=o)&&r.__esModule?r:{default:r};function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var s=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];a(this,t),this.patterns=[],this.add(e)}return t.prototype.add=function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return"string"==typeof e&&(e=[e]),e.forEach((function(e){-1===t.patterns.indexOf(e)&&t.patterns.push(e)})),this.patterns},t.prototype.remove=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return"string"==typeof t&&(t=[t]),this.patterns=this.patterns.filter((function(e){return-1===t.indexOf(e)})),this.patterns},t.prototype.test=function(t){var e=!1;return this.patterns.forEach((function(n){!0===new i.default(n).test(t)&&(e=!0)})),e},t.prototype.debug=function(t){var e={};return this.patterns.forEach((function(n){var r=new i.default(n);e[n]=r.debug(t)})),e},t}();e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=u(n(48)),o=u(n(49)),i=u(n(50)),a=u(n(51)),s=u(n(63)),c=u(n(5));function u(t){return t&&t.__esModule?t:{default:t}}var l=new RegExp("^([a-z]+|\\*)*://([^\\/\\#\\?]+@)*([\\w\\*\\.\\-]+)*(\\:\\d+)*(/([^\\?\\#]*))*(\\?([^\\#]*))*(\\#(.*))*"),f={scheme:1,host:3,path:6,params:8,fragment:10},p=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),"*"!==e&&"<all_urls>"!==e||(e="*://*/*?*#*"),this.original_pattern=e,this.pattern=this.sanitize(e),this.url_parts=this.getUrlParts(this.pattern)}return t.prototype.split=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n={},r=t.match(l);for(var o in f){var i=f[o];n[o]=(0,c.default)(r)&&(0,c.default)(r[i])?r[i]:e}return n},t.prototype.getUrlParts=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.pattern,e=this.split(t);return{scheme:new r.default(e.scheme),host:new o.default(e.host),path:new i.default(e.path),params:new a.default(e.params),fragment:new s.default(e.fragment)}},t.prototype.sanitize=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.original_pattern,e="*://*/*?*#*";return"*"!==t&&"<all_urls>"!==t||(t=e),t},t.prototype.validate=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.url_parts,e=!0;for(var n in t){var r=t[n];r.validate()||(e=!1)}return e},t.prototype.test=function(t){var e=this,n=!1;if((0,c.default)(t)){n=!0;var r=this.split(t);["scheme","host","path","params","fragment"].forEach((function(t){e.url_parts[t].test(r[t])||(n=!1)}))}return n},t.prototype.debug=function(t){var e=this,n=this.split(t),r={};return Object.keys(n).forEach((function(t){r[t]={pattern:e.url_parts[t].original_pattern,value:n[t],result:e.url_parts[t].test(n[t])}})),r},t}();e.default=p},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=a(n(2)),i=a(n(5));function a(t){return t&&t.__esModule?t:{default:t}}function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var u=function(t){function e(){return s(this,e),c(this,t.apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.validate=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.original_pattern;if((0,i.default)(t)){var e=new RegExp("^(\\*|[a-z]+)$");return e.test(t)}return!1},r(e,[{key:"sanitize_replacements",get:function(){return[{substring:"*",replacement:"https?"}]}}]),e}(o.default);e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(2);function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var c=function(t){function e(){return a(this,e),s(this,t.apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"validate_rules",get:function(){return[/.+/]}},{key:"invalidate_rules",get:function(){return[/\*\*/,/\*[^\.]+/,/.\*/,/^(\.|-)/,/(\.|-)$/,/[^a-z0-9-.\*]/]}},{key:"sanitize_replacements",get:function(){return[{substring:/^\*\./,replacement:"(*.)?"},{substring:".",replacement:"\\."},{substring:"*",replacement:"[a-z0-9-_.]+"}]}}]),e}(((r=i)&&r.__esModule?r:{default:r}).default);e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(2);function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var c=function(t){function e(){return a(this,e),s(this,t.apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"default_value",get:function(){return""}},{key:"sanitize_replacements",get:function(){return[{substring:/\(/,replacement:"\\("},{substring:/\)/,replacement:"\\)"},{substring:/\/$/,replacement:"\\/?"},{substring:/\/\*$/,replacement:"((/?)|/*)"},{substring:/\*/g,replacement:"[a-zA-Z0-9-./_:~!$&'()*,;=@%]*"}]}}]),e}(((r=i)&&r.__esModule?r:{default:r}).default);e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&s.return&&s.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=c(n(2)),a=c(n(5)),s=c(n(70));function c(t){return t&&t.__esModule?t:{default:t}}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var f=function(t){function e(){return u(this,e),l(this,t.apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.sanitize=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.original_pattern;"string"==typeof t&&"!"===t.substring(0,1)&&(t=t.substring(1),this.is_strict=!0),"*"!==t&&""!==t||(t=null);var e=[];return(0,a.default)(t)&&t.split("&").forEach((function(t){var n=t.split("="),o=r(n,2),i=o[0],s=o[1];i="*"===i?".+":i.replace(/\*/g,".*"),s=(s=(0,a.default)(s)&&""!==s?"*"===s?"=?.*":"="+s.replace(/\*/g,".*"):"=?").replace(/[\[\](){}]/g,"\\$&"),e.push(i+s)})),e},e.prototype.test=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.pattern,n=!0;if((0,a.default)(e)){if(this.is_strict&&null===t&&0===e.length)return!0;if(n=(0,s.default)(e,(function(e,n){var r=new RegExp("(^|&)"+n+"(&|$)");return e&&r.test(t)}),n),!0===this.is_strict)if("string"==typeof t){var r=e.map((function(t){return"("+t+")"})).join("|"),o=new RegExp("(^|&)("+r+")(&|$)");n=(0,s.default)(t.split("&"),(function(t,e){return t&&o.test(e)}),n)}else n=!1}return n},o(e,[{key:"is_required",get:function(){return!1}},{key:"invalidate_rules",get:function(){return[/==/,/=[^&]+=/,/^=$/]}}]),e}(i.default);e.default=f},function(t,e,n){"use strict";var r;if(!Object.keys){var o=Object.prototype.hasOwnProperty,i=Object.prototype.toString,a=n(19),s=Object.prototype.propertyIsEnumerable,c=!s.call({toString:null},"toString"),u=s.call((function(){}),"prototype"),l=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],f=function(t){var e=t.constructor;return e&&e.prototype===t},p={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},d=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!p["$"+t]&&o.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{f(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();r=function(t){var e=null!==t&&"object"==typeof t,n="[object Function]"===i.call(t),r=a(t),s=e&&"[object String]"===i.call(t),p=[];if(!e&&!n&&!r)throw new TypeError("Object.keys called on a non-object");var h=u&&n;if(s&&t.length>0&&!o.call(t,0))for(var y=0;y<t.length;++y)p.push(String(y));if(r&&t.length>0)for(var v=0;v<t.length;++v)p.push(String(v));else for(var E in t)h&&"prototype"===E||!o.call(t,E)||p.push(String(E));if(c)for(var m=function(t){if("undefined"==typeof window||!d)return f(t);try{return f(t)}catch(t){return!1}}(t),g=0;g<l.length;++g)m&&"constructor"===l[g]||!o.call(t,l[g])||p.push(l[g]);return p}}t.exports=r},function(t,e,n){"use strict";var r=n(9)(),o=n(21)("Object.prototype.toString"),i=function(t){return!(r&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===o(t)},a=function(t){return!!i(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==o(t)&&"[object Function]"===o(t.callee)},s=function(){return i(arguments)}();i.isLegacyArguments=a,t.exports=s?i:a},function(t,e,n){"use strict";var r="undefined"!=typeof Symbol&&Symbol,o=n(20);t.exports=function(){return"function"==typeof r&&("function"==typeof Symbol&&("symbol"==typeof r("foo")&&("symbol"==typeof Symbol("bar")&&o())))}},function(t,e,n){"use strict";var r="Function.prototype.bind called on incompatible ",o=Array.prototype.slice,i=Object.prototype.toString;t.exports=function(t){var e=this;if("function"!=typeof e||"[object Function]"!==i.call(e))throw new TypeError(r+e);for(var n,a=o.call(arguments,1),s=function(){if(this instanceof n){var r=e.apply(this,a.concat(o.call(arguments)));return Object(r)===r?r:this}return e.apply(t,a.concat(o.call(arguments)))},c=Math.max(0,e.length-a.length),u=[],l=0;l<c;l++)u.push("$"+l);if(n=Function("binder","return function ("+u.join(",")+"){ return binder.apply(this,arguments); }")(s),e.prototype){var f=function(){};f.prototype=e.prototype,n.prototype=new f,f.prototype=null}return n}},function(t,e,n){"use strict";var r=n(10);t.exports=r.call(Function.call,Object.prototype.hasOwnProperty)},function(t,e,n){"use strict";var r=n(3),o=n(11),i=n(23),a=n(24),s=n(58),c=o(a(),Object);r(c,{getPolyfill:a,implementation:i,shim:s}),t.exports=c},function(t,e,n){"use strict";var r=n(24),o=n(3);t.exports=function(){var t=r();return o(Object,{is:t},{is:function(){return Object.is!==t}}),t}},function(t,e,n){"use strict";var r,o,i,a,s=n(21),c=n(9)();if(c){r=s("Object.prototype.hasOwnProperty"),o=s("RegExp.prototype.exec"),i={};var u=function(){throw i};a={toString:u,valueOf:u},"symbol"==typeof Symbol.toPrimitive&&(a[Symbol.toPrimitive]=u)}var l=s("Object.prototype.toString"),f=Object.getOwnPropertyDescriptor;t.exports=c?function(t){if(!t||"object"!=typeof t)return!1;var e=f(t,"lastIndex");if(!(e&&r(e,"value")))return!1;try{o(t,a)}catch(t){return t===i}}:function(t){return!(!t||"object"!=typeof t&&"function"!=typeof t)&&"[object RegExp]"===l(t)}},function(t,e,n){"use strict";var r=n(3),o=n(11),i=n(25),a=n(26),s=n(61),c=o(a());r(c,{getPolyfill:a,implementation:i,shim:s}),t.exports=c},function(t,e,n){"use strict";var r=n(3).supportsDescriptors,o=n(26),i=Object.getOwnPropertyDescriptor,a=Object.defineProperty,s=TypeError,c=Object.getPrototypeOf,u=/a/;t.exports=function(){if(!r||!c)throw new s("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");var t=o(),e=c(u),n=i(e,"flags");return n&&n.get===t||a(e,"flags",{configurable:!0,enumerable:!1,get:t}),t}},function(t,e,n){"use strict";var r=Date.prototype.getDay,o=Object.prototype.toString,i=n(9)();t.exports=function(t){return"object"==typeof t&&null!==t&&(i?function(t){try{return r.call(t),!0}catch(t){return!1}}(t):"[object Date]"===o.call(t))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(2);function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var c=function(t){function e(){return a(this,e),s(this,t.apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"is_required",get:function(){return!1}},{key:"invalidate_rules",get:function(){return[/#/]}},{key:"sanitize_replacements",get:function(){return[{substring:/\*/g,replacement:".*"},{substring:/\?/g,replacement:"\\?"},{substring:/\//g,replacement:"\\/"}]}}]),e}(((r=i)&&r.__esModule?r:{default:r}).default);e.default=c},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((r=r.apply(t,e||[])).next())}))},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.RemoteBox=e.LocalBox=e.Box=e.BoxEvents=void 0;const i=o(n(13)),a=o(n(65)),s=o(n(66)),c=n(0),u=n(27),l=n(6);var f;!function(t){t.Pinned="PINNED",t.Unpinned="UNPINNED"}(f=e.BoxEvents||(e.BoxEvents={}));class p extends i.default{constructor(){super(...arguments),this.containerEl=document.createElement("div"),this.titleEl=document.createElement("div"),this.isPinned=!1}init(){this.containerEl.classList.add("note-link-previewer"),this.containerEl.append(this.titleEl,this.bodyEl)}initTitle(){const t=document.createElement("button");t.classList.add("note-link-previewer-pin-button"),t.innerHTML=a.default,t.addEventListener("click",()=>{this.isPinned?(this.isPinned=!1,this.emit(f.Unpinned)):(this.isPinned=!0,this.emit(f.Pinned),t.innerHTML=s.default)}),this.titleEl.appendChild(t)}}e.Box=p;e.LocalBox=class extends p{constructor(t){super(),this.url=t,this.bodyEl=document.createElement("article"),this.init()}init(){const t=Object.create(null,{init:{get:()=>super.init}});return r(this,void 0,void 0,(function*(){this.containerEl.classList.add("note-link-previewer-local"),this.initBody(),this.initTitle(),t.init.call(this)}))}initBody(){return r(this,void 0,void 0,(function*(){const{noteId:t}=this.url;try{const e=yield webviewApi.postMessage(c.MARKDOWN_SCRIPT_ID,{event:"queryNoteResources",payload:{noteId:t}}),n=u.processNoteContent(yield webviewApi.postMessage(c.MARKDOWN_SCRIPT_ID,{event:"fetchNoteHtml",payload:{id:t}}),e);this.bodyEl.innerHTML=n}catch(t){this.bodyEl.innerHTML="Can not find note.",this.bodyEl.classList.add("note-link-previewer-local-empty-body")}this.bodyEl.classList.add("note-link-previewer-local-body"),this.bodyEl.style.position="relative"}))}initTitle(){const t=Object.create(null,{initTitle:{get:()=>super.initTitle}});return r(this,void 0,void 0,(function*(){const{elementId:e,noteId:n}=this.url;try{const{path:r,title:o}=yield webviewApi.postMessage(c.MARKDOWN_SCRIPT_ID,{event:"queryNote",payload:{id:n}});this.titleEl.classList.add("note-link-previewer-local-title"),this.titleEl.innerHTML=`${r}/${o}`+(e?"#"+e:""),t.initTitle.call(this)}catch(t){return}}))}scrollToElement(){if(!this.url.elementId)return;const t=this.bodyEl.querySelector("#"+this.url.elementId);t&&(this.bodyEl.scrollTop=t.offsetTop)}};e.RemoteBox=class extends p{constructor(t){super(),this.url=t,this.bodyEl=document.createElement("iframe"),this.init()}init(){this.response=fetch(this.url),this.initBody(),this.initTitle(),super.init(),this.containerEl.classList.add("note-link-previewer-remote")}initTitle(){const t=Object.create(null,{initTitle:{get:()=>super.initTitle}});return r(this,void 0,void 0,(function*(){if(!this.response)throw Error("no request");try{const t=yield this.response,e=yield t.text(),n=l.parseHtml(e);this.titleEl.innerHTML=n.title}catch(t){this.titleEl.innerHTML="Error"}this.titleEl.classList.add("note-link-previewer-remote-title"),t.initTitle.call(this)}))}initBody(){var t;return r(this,void 0,void 0,(function*(){if(!this.response)throw Error("no request");this.bodyEl.src=this.url,this.bodyEl.classList.add("note-link-previewer-remote-body");const e=document.createElement("p");let n;e.classList.add("note-link-previewer-remote-empty-body");try{n=(yield this.response).headers}catch(t){return e.innerHTML="Fail to preview page: "+t,void this.bodyEl.replaceWith(e)}(n.has("x-frame-options")||(null===(t=n.get("content-security-policy"))||void 0===t?void 0:t.includes("frame-ancestors")))&&(e.innerHTML="This website prevents us from previewing.",this.bodyEl.replaceWith(e))}))}}},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-pin-angle" viewBox="0 0 16 16"><path d="M9.828.722a.5.5 0 0 1 .354.146l4.95 4.95a.5.5 0 0 1 0 .707c-.48.48-1.072.588-1.503.588-.177 0-.335-.018-.46-.039l-3.134 3.134a5.927 5.927 0 0 1 .16 1.013c.046.702-.032 1.687-.72 2.375a.5.5 0 0 1-.707 0l-2.829-2.828-3.182 3.182c-.195.195-1.219.902-1.414.707-.195-.195.512-1.22.707-1.414l3.182-3.182-2.828-2.829a.5.5 0 0 1 0-.707c.688-.688 1.673-.767 2.375-.72a5.922 5.922 0 0 1 1.013.16l3.134-3.133a2.772 2.772 0 0 1-.04-.461c0-.43.108-1.022.589-1.503a.5.5 0 0 1 .353-.146zm.122 2.112v-.002.002zm0-.002v.002a.5.5 0 0 1-.122.51L6.293 6.878a.5.5 0 0 1-.511.12H5.78l-.014-.004a4.507 4.507 0 0 0-.288-.076 4.922 4.922 0 0 0-.765-.116c-.422-.028-.836.008-1.175.15l5.51 5.509c.141-.34.177-.753.149-1.175a4.924 4.924 0 0 0-.192-1.054l-.004-.013v-.001a.5.5 0 0 1 .12-.512l3.536-3.535a.5.5 0 0 1 .532-.115l.096.022c.087.017.208.034.344.034.114 0 .23-.011.343-.04L9.927 2.028c-.029.113-.04.23-.04.343a1.779 1.779 0 0 0 .062.46z"></path></svg>'},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16"><path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"></path></svg>'},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((r=r.apply(t,e||[])).next())}))},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.IconBuilder=void 0;const i=o(n(4)),a=n(0),s=n(1),c=n(68);e.IconBuilder=class{constructor(t){this.view=t,this.ready=this.init(),this.icons=[]}init(){return r(this,void 0,void 0,(function*(){const t=i.default(this.attach.bind(this),500);this.view.on(s.MarkdownViewEvents.NoteDidUpdate,t),this.enabled=yield webviewApi.postMessage(a.MARKDOWN_SCRIPT_ID,{event:"querySetting",payload:{key:a.URL_ICON_ENABLED_SETTING}}),this.enabled||this.view.off(s.MarkdownViewEvents.NoteDidUpdate,t)}))}attach(){return r(this,void 0,void 0,(function*(){if(yield this.ready,this.icons.forEach(t=>t.destroy()),!this.enabled)return;const t=[...document.getElementById(s.ROOT_ELEMENT_ID).querySelectorAll('a[href]:not([href^="#"])')],e=[];for(const n of t){const t=n.getAttribute("href");e.push(new c.UrlIcon(t,n))}this.icons=e}))}}},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((r=r.apply(t,e||[])).next())}))},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.UrlIcon=void 0;const i=o(n(69)),a=o(n(17)),s=n(6);class c{constructor(t,e){this.href=t,this.containerEl=e,this.pageUrl=s.getRemoteUrl(this.href);try{this.origin=new URL(this.pageUrl).origin}catch(t){this.origin=""}this.iconEl=this.createIconEl(),this.loadIcon()}get faviconUrl(){return this.origin+"/favicon.ico"}isHash(){return this.href.startsWith("#")&&this.href.length>1}createIconEl(){const t=this.containerEl.querySelector(".note-link-external-website-icon");t&&t.remove();const e=document.createElement("span");return e.innerHTML=this.isHash()?a.default:i.default,e.classList.add("note-link-external-website-icon"),this.containerEl.prepend(e),e}setIconUrl(t){const e=document.createElement("img");e.src=t,this.iconEl.innerHTML=e.outerHTML,this.iconUrl=t}loadIcon(){return r(this,void 0,void 0,(function*(){if(!this.origin||this.isHash())return;const t=c.getIconKey(this.origin),e=localStorage.getItem(t);if("DEFAULT"===e)return;let n;this.abortController=new AbortController;try{n=yield fetch(e||this.faviconUrl,{signal:this.abortController.signal})}catch(t){return}if(200===n.status){const t=yield n.blob();if(t.type.includes("image"))return void this.setIconUrl(URL.createObjectURL(t))}try{const e=yield fetch(this.pageUrl,{signal:this.abortController.signal}),n=yield e.text(),r=s.parseHtml(n).querySelector('link[rel="icon"]');if(!r)throw new Error("no icon linkEl");const o=new URL(r.getAttribute("href"),this.pageUrl).toString(),i=yield fetch(o,{signal:this.abortController.signal,redirect:"error"});if(200!==i.status)throw new Error("fetch icon failed");const a=yield i.blob();if(!a.type.includes("image"))throw new Error("fetch icon failed");{const e=URL.createObjectURL(a);this.setIconUrl(e),localStorage.setItem(t,e)}}catch(e){localStorage.setItem(t,"DEFAULT")}this.abortController=void 0}))}destroy(){this.abortController&&this.abortController.abort(),this.iconUrl&&URL.revokeObjectURL(this.iconUrl)}static getIconKey(t){return"note-link-system-icon-url-"+t}}e.UrlIcon=c},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-globe" viewBox="0 0 16 16"><path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm7.5-6.923c-.67.204-1.335.82-1.887 1.855A7.97 7.97 0 0 0 5.145 4H7.5V1.077zM4.09 4a9.267 9.267 0 0 1 .64-1.539 6.7 6.7 0 0 1 .597-.933A7.025 7.025 0 0 0 2.255 4H4.09zm-.582 3.5c.03-.877.138-1.718.312-2.5H1.674a6.958 6.958 0 0 0-.656 2.5h2.49zM4.847 5a12.5 12.5 0 0 0-.338 2.5H7.5V5H4.847zM8.5 5v2.5h2.99a12.495 12.495 0 0 0-.337-2.5H8.5zM4.51 8.5a12.5 12.5 0 0 0 .337 2.5H7.5V8.5H4.51zm3.99 0V11h2.653c.187-.765.306-1.608.338-2.5H8.5zM5.145 12c.138.386.295.744.468 1.068.552 1.035 1.218 1.65 1.887 1.855V12H5.145zm.182 2.472a6.696 6.696 0 0 1-.597-.933A9.268 9.268 0 0 1 4.09 12H2.255a7.024 7.024 0 0 0 3.072 2.472zM3.82 11a13.652 13.652 0 0 1-.312-2.5h-2.49c.062.89.291 1.733.656 2.5H3.82zm6.853 3.472A7.024 7.024 0 0 0 13.745 12H11.91a9.27 9.27 0 0 1-.64 1.539 6.688 6.688 0 0 1-.597.933zM8.5 12v2.923c.67-.204 1.335-.82 1.887-1.855.173-.324.33-.682.468-1.068H8.5zm3.68-1h2.146c.365-.767.594-1.61.656-2.5h-2.49a13.65 13.65 0 0 1-.312 2.5zm2.802-3.5a6.959 6.959 0 0 0-.656-2.5H12.18c.174.782.282 1.623.312 2.5h2.49zM11.27 2.461c.247.464.462.98.64 1.539h1.835a7.024 7.024 0 0 0-3.072-2.472c.218.284.418.598.597.933zM10.855 4a7.966 7.966 0 0 0-.468-1.068C9.835 1.897 9.17 1.282 8.5 1.077V4h2.355z"></path></svg>'},function(t,e,n){"use strict";n.r(e),n.d(e,"default",(function(){return s}));var r=function(t){if(null==this)throw new TypeError("Array.prototype.reduce called on null or undefined");if("function"!=typeof t)throw new TypeError(t+" is not a function");var e,n=Object(this),r=n.length>>>0,o=0;if(2==arguments.length)e=arguments[1];else{for(;o<r&&!(o in n);)o++;if(o>=r)throw new TypeError("Reduce of empty array with no initial value");e=n[o++]}for(;o<r;o++)o in n&&(e=t(e,n[o],o,n));return e},o=n(32),i=n.n(o);function a(){var t=!1,e=[2,4,6],n=[],r=[[10,2,0,e],[12,4,1,e],[16,6,2,e]];try{t=22===Array.prototype.reduce.call(e,(function(t,e,r,o){return n.push([t,e,r,o]),t+e}),10)&&i()(n,r,{strict:!0})}catch(t){}return t}function s(){for(var t=arguments.length<=0||void 0===arguments[0]?[]:arguments[0],e=a()?Array.prototype.reduce:r,n=arguments.length,o=Array(n>1?n-1:0),i=1;i<n;i++)o[i-1]=arguments[i];return e.apply(t,o)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,