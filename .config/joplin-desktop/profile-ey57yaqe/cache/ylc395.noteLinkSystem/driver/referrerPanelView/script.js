!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,a){function i(e){try{u(o.next(e))}catch(e){a(e)}}function c(e){try{u(o.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((o=o.apply(e,t||[])).next())}))},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(n(1));a.default("[data-note-id]","click",e=>{const t=e.delegateTarget,n=t.dataset.noteId,o=Number(t.dataset.referenceIndex);if(!n)throw new Error("no noteId");const r=o?{index:o}:void 0;webviewApi.postMessage({event:"openNote",payload:{noteId:n,reference:r}})}),a.default("[data-note-id]","contextmenu",e=>{const t=e.delegateTarget,n=t.dataset.noteId;if(!n)throw new Error("no noteId");const o=`[${t.innerText}](:/${n})`,r=document.querySelector("h1"),a="Copy Successfully!",i=r.innerText;r.innerText=a,webviewApi.postMessage({event:"writeClipboard",payload:{content:o}}),i!==a&&setTimeout(()=>{r.innerText=i},1e3)}),a.default("mark > [data-note-link-element-id]","click",e=>o(void 0,void 0,void 0,(function*(){e.stopPropagation();const t=e.delegateTarget.dataset.noteLinkElementId;if(!t)throw new Error("no element id");webviewApi.postMessage({event:"scrollToHash",payload:{hash:t}})})),!0)},function(e,t,n){var o=n(2);function r(e,t,n,o,r){var i=a.apply(this,arguments);return e.addEventListener(n,i,r),{destroy:function(){e.removeEventListener(n,i,r)}}}function a(e,t,n,r){return function(n){n.delegateTarget=o(n.target,t),n.delegateTarget&&r.call(e,n)}}e.exports=function(e,t,n,o,a){return"function"==typeof e.addEventListener?r.apply(null,arguments):"function"==typeof n?r.bind(null,document).apply(null,arguments):("string"==typeof e&&(e=document.querySelectorAll(e)),Array.prototype.map.call(e,(function(e){return r(e,t,n,o,a)})))}},function(e,t){if("undefined"!=typeof Element&&!Element.prototype.matches){var n=Element.prototype;n.matches=n.matchesSelector||n.mozMatchesSelector||n.msMatchesSelector||n.oMatchesSelector||n.webkitMatchesSelector}e.exports=function(e,t){for(;e&&9!==e.nodeType;){if("function"==typeof e.matches&&e.matches(t))return e;e=e.parentNode}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RyaXZlci9yZWZlcnJlclBhbmVsVmlldy9zY3JpcHQudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlbGVnYXRlL3NyYy9kZWxlZ2F0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVsZWdhdGUvc3JjL2Nsb3Nlc3QuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJlIiwidGFyZ2V0IiwiZGVsZWdhdGVUYXJnZXQiLCJub3RlSWQiLCJkYXRhc2V0IiwicmVmZXJlbmNlSW5kZXgiLCJOdW1iZXIiLCJFcnJvciIsInJlZmVyZW5jZSIsImluZGV4IiwidW5kZWZpbmVkIiwid2Vidmlld0FwaSIsInBvc3RNZXNzYWdlIiwiZXZlbnQiLCJwYXlsb2FkIiwiY29weUNvbnRlbnQiLCJpbm5lclRleHQiLCJ0aXRsZUVsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidGlwIiwidGl0bGUiLCJjb250ZW50Iiwic2V0VGltZW91dCIsInN0b3BQcm9wYWdhdGlvbiIsImVsSWQiLCJub3RlTGlua0VsZW1lbnRJZCIsImhhc2giLCJjbG9zZXN0IiwiX2RlbGVnYXRlIiwiZWxlbWVudCIsInNlbGVjdG9yIiwidHlwZSIsImNhbGxiYWNrIiwidXNlQ2FwdHVyZSIsImxpc3RlbmVyRm4iLCJsaXN0ZW5lciIsImFwcGx5IiwidGhpcyIsImFyZ3VtZW50cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJkZXN0cm95IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsIkFycmF5IiwibWFwIiwiRWxlbWVudCIsIm1hdGNoZXMiLCJwcm90byIsIm1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm5vZGVUeXBlIiwicGFyZW50Tm9kZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUgsRUFBb0JVLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJaLEVBQW9CYSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6Ry9CLEVBQW9Ca0MsRUFBSSxHQUlqQmxDLEVBQW9CQSxFQUFvQm1DLEVBQUksRyxnZUNsRnJELGdCQWtCQSxVQUFTLGlCQUFrQixRQUFVQyxJQUNuQyxNQUFNQyxFQUFTRCxFQUFFRSxlQUNYQyxFQUFTRixFQUFPRyxRQUFRRCxPQUN4QkUsRUFBaUJDLE9BQU9MLEVBQU9HLFFBQVFDLGdCQUU3QyxJQUFLRixFQUNILE1BQU0sSUFBSUksTUFBTSxhQUdsQixNQUFNQyxFQUFZSCxFQUFpQixDQUFFSSxNQUFPSixRQUFtQkssRUFDL0RDLFdBQVdDLFlBQVksQ0FBRUMsTUFBTyxXQUFZQyxRQUFTLENBQUVYLFNBQVFLLGlCQUdqRSxVQUFTLGlCQUFrQixjQUFnQlIsSUFDekMsTUFBTUMsRUFBU0QsRUFBRUUsZUFDWEMsRUFBU0YsRUFBT0csUUFBUUQsT0FFOUIsSUFBS0EsRUFDSCxNQUFNLElBQUlJLE1BQU0sYUFHbEIsTUFBTVEsRUFBYyxJQUFJZCxFQUFPZSxnQkFBZ0JiLEtBQ3pDYyxFQUFVQyxTQUFTQyxjQUFjLE1BQ2pDQyxFQUFNLHFCQUNOQyxFQUFRSixFQUFRRCxVQUV0QkMsRUFBUUQsVUFBWUksRUFFcEJULFdBQVdDLFlBQVksQ0FBRUMsTUFBTyxpQkFBa0JDLFFBQVMsQ0FBRVEsUUFBU1AsS0FFbEVNLElBQVVELEdBQ1pHLFdBQVcsS0FDVE4sRUFBUUQsVUFBWUssR0FDbkIsT0FJUCxVQUNFLHFDQUNBLFFBQ09yQixHQUFXLE9BQUQsNkJBQ2ZBLEVBQUV3QixrQkFFRixNQUNNQyxFQURTekIsRUFBRUUsZUFDR0UsUUFBUXNCLGtCQUU1QixJQUFLRCxFQUNILE1BQU0sSUFBSWxCLE1BQU0saUJBSWxCSSxXQUFXQyxZQUFZLENBQUVDLE1BQU8sZUFBZ0JDLFFBQVMsQ0FBRWEsS0FBTUYsU0FFbkUsSSxnQkN2RUYsSUFBSUcsRUFBVSxFQUFRLEdBWXRCLFNBQVNDLEVBQVVDLEVBQVNDLEVBQVVDLEVBQU1DLEVBQVVDLEdBQ2xELElBQUlDLEVBQWFDLEVBQVNDLE1BQU1DLEtBQU1DLFdBSXRDLE9BRkFULEVBQVFVLGlCQUFpQlIsRUFBTUcsRUFBWUQsR0FFcEMsQ0FDSE8sUUFBUyxXQUNMWCxFQUFRWSxvQkFBb0JWLEVBQU1HLEVBQVlELEtBZ0QxRCxTQUFTRSxFQUFTTixFQUFTQyxFQUFVQyxFQUFNQyxHQUN2QyxPQUFPLFNBQVNqQyxHQUNaQSxFQUFFRSxlQUFpQjBCLEVBQVE1QixFQUFFQyxPQUFROEIsR0FFakMvQixFQUFFRSxnQkFDRitCLEVBQVM5RCxLQUFLMkQsRUFBUzlCLElBS25DakMsRUFBT0QsUUEzQ1AsU0FBa0I2RSxFQUFVWixFQUFVQyxFQUFNQyxFQUFVQyxHQUVsRCxNQUF5QyxtQkFBOUJTLEVBQVNILGlCQUNUWCxFQUFVUSxNQUFNLEtBQU1FLFdBSWIsbUJBQVRQLEVBR0FILEVBQVVyQyxLQUFLLEtBQU0wQixVQUFVbUIsTUFBTSxLQUFNRSxZQUk5QixpQkFBYkksSUFDUEEsRUFBV3pCLFNBQVMwQixpQkFBaUJELElBSWxDRSxNQUFNakQsVUFBVWtELElBQUkzRSxLQUFLd0UsR0FBVSxTQUFVYixHQUNoRCxPQUFPRCxFQUFVQyxFQUFTQyxFQUFVQyxFQUFNQyxFQUFVQyxTLGNDakQ1RCxHQUF1QixvQkFBWmEsVUFBNEJBLFFBQVFuRCxVQUFVb0QsUUFBUyxDQUM5RCxJQUFJQyxFQUFRRixRQUFRbkQsVUFFcEJxRCxFQUFNRCxRQUFVQyxFQUFNQyxpQkFDTkQsRUFBTUUsb0JBQ05GLEVBQU1HLG1CQUNOSCxFQUFNSSxrQkFDTkosRUFBTUssc0JBb0IxQnZGLEVBQU9ELFFBVlAsU0FBa0JnRSxFQUFTQyxHQUN2QixLQUFPRCxHQXZCYyxJQXVCSEEsRUFBUXlCLFVBQWlDLENBQ3ZELEdBQStCLG1CQUFwQnpCLEVBQVFrQixTQUNmbEIsRUFBUWtCLFFBQVFqQixHQUNsQixPQUFPRCxFQUVUQSxFQUFVQSxFQUFRMEIiLCJmaWxlIjoiZHJpdmVyL3JlZmVycmVyUGFuZWxWaWV3L3NjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImltcG9ydCBkZWxlZ2F0ZSBmcm9tICdkZWxlZ2F0ZSc7XG5pbXBvcnQgdHlwZSB7XG4gIE9wZW5Ob3RlUmVxdWVzdCxcbiAgV3JpdGVDbGlwYm9hcmRSZXF1ZXN0LFxuICBTY3JvbGxUb0hhc2hSZXF1ZXN0LFxuICBRdWVyeUN1cnJlbnROb3RlUmVxdWVzdCxcbn0gZnJvbSAnZHJpdmVyL2NvbnN0YW50cyc7XG5cbmRlY2xhcmUgY29uc3Qgd2Vidmlld0FwaToge1xuICBwb3N0TWVzc2FnZTogPFQ+KFxuICAgIHBheWxvYWQ6XG4gICAgICB8IE9wZW5Ob3RlUmVxdWVzdFxuICAgICAgfCBXcml0ZUNsaXBib2FyZFJlcXVlc3RcbiAgICAgIHwgU2Nyb2xsVG9IYXNoUmVxdWVzdFxuICAgICAgfCBRdWVyeUN1cnJlbnROb3RlUmVxdWVzdCxcbiAgKSA9PiBQcm9taXNlPFQ+O1xufTtcblxuZGVsZWdhdGUoJ1tkYXRhLW5vdGUtaWRdJywgJ2NsaWNrJywgKGU6IGFueSkgPT4ge1xuICBjb25zdCB0YXJnZXQgPSBlLmRlbGVnYXRlVGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICBjb25zdCBub3RlSWQgPSB0YXJnZXQuZGF0YXNldC5ub3RlSWQ7XG4gIGNvbnN0IHJlZmVyZW5jZUluZGV4ID0gTnVtYmVyKHRhcmdldC5kYXRhc2V0LnJlZmVyZW5jZUluZGV4KTtcblxuICBpZiAoIW5vdGVJZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbm8gbm90ZUlkJyk7XG4gIH1cblxuICBjb25zdCByZWZlcmVuY2UgPSByZWZlcmVuY2VJbmRleCA/IHsgaW5kZXg6IHJlZmVyZW5jZUluZGV4IH0gOiB1bmRlZmluZWQ7XG4gIHdlYnZpZXdBcGkucG9zdE1lc3NhZ2UoeyBldmVudDogJ29wZW5Ob3RlJywgcGF5bG9hZDogeyBub3RlSWQsIHJlZmVyZW5jZSB9IH0pO1xufSk7XG5cbmRlbGVnYXRlKCdbZGF0YS1ub3RlLWlkXScsICdjb250ZXh0bWVudScsIChlOiBhbnkpID0+IHtcbiAgY29uc3QgdGFyZ2V0ID0gZS5kZWxlZ2F0ZVRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgY29uc3Qgbm90ZUlkID0gdGFyZ2V0LmRhdGFzZXQubm90ZUlkO1xuXG4gIGlmICghbm90ZUlkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdubyBub3RlSWQnKTtcbiAgfVxuXG4gIGNvbnN0IGNvcHlDb250ZW50ID0gYFske3RhcmdldC5pbm5lclRleHR9XSg6LyR7bm90ZUlkfSlgO1xuICBjb25zdCB0aXRsZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaDEnKSE7XG4gIGNvbnN0IHRpcCA9ICdDb3B5IFN1Y2Nlc3NmdWxseSEnO1xuICBjb25zdCB0aXRsZSA9IHRpdGxlRWwuaW5uZXJUZXh0O1xuXG4gIHRpdGxlRWwuaW5uZXJUZXh0ID0gdGlwO1xuXG4gIHdlYnZpZXdBcGkucG9zdE1lc3NhZ2UoeyBldmVudDogJ3dyaXRlQ2xpcGJvYXJkJywgcGF5bG9hZDogeyBjb250ZW50OiBjb3B5Q29udGVudCB9IH0pO1xuXG4gIGlmICh0aXRsZSAhPT0gdGlwKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aXRsZUVsLmlubmVyVGV4dCA9IHRpdGxlO1xuICAgIH0sIDEwMDApO1xuICB9XG59KTtcblxuZGVsZWdhdGUoXG4gICdtYXJrID4gW2RhdGEtbm90ZS1saW5rLWVsZW1lbnQtaWRdJyxcbiAgJ2NsaWNrJyxcbiAgYXN5bmMgKGU6IGFueSkgPT4ge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBjb25zdCB0YXJnZXQgPSBlLmRlbGVnYXRlVGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IGVsSWQgPSB0YXJnZXQuZGF0YXNldC5ub3RlTGlua0VsZW1lbnRJZDtcblxuICAgIGlmICghZWxJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBlbGVtZW50IGlkJyk7XG4gICAgfVxuXG4gICAgLy8gdG9kbzogaWYgZWxJZCBpcyBub3QgZXhpc3RpbmcgaW4gbm90ZS4uLlxuICAgIHdlYnZpZXdBcGkucG9zdE1lc3NhZ2UoeyBldmVudDogJ3Njcm9sbFRvSGFzaCcsIHBheWxvYWQ6IHsgaGFzaDogZWxJZCB9IH0pO1xuICB9LFxuICB0cnVlLFxuKTtcbiIsInZhciBjbG9zZXN0ID0gcmVxdWlyZSgnLi9jbG9zZXN0Jyk7XG5cbi8qKlxuICogRGVsZWdhdGVzIGV2ZW50IHRvIGEgc2VsZWN0b3IuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHtCb29sZWFufSB1c2VDYXB0dXJlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIF9kZWxlZ2F0ZShlbGVtZW50LCBzZWxlY3RvciwgdHlwZSwgY2FsbGJhY2ssIHVzZUNhcHR1cmUpIHtcbiAgICB2YXIgbGlzdGVuZXJGbiA9IGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXJGbiwgdXNlQ2FwdHVyZSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lckZuLCB1c2VDYXB0dXJlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBEZWxlZ2F0ZXMgZXZlbnQgdG8gYSBzZWxlY3Rvci5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR8U3RyaW5nfEFycmF5fSBbZWxlbWVudHNdXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHtCb29sZWFufSB1c2VDYXB0dXJlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGRlbGVnYXRlKGVsZW1lbnRzLCBzZWxlY3RvciwgdHlwZSwgY2FsbGJhY2ssIHVzZUNhcHR1cmUpIHtcbiAgICAvLyBIYW5kbGUgdGhlIHJlZ3VsYXIgRWxlbWVudCB1c2FnZVxuICAgIGlmICh0eXBlb2YgZWxlbWVudHMuYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gX2RlbGVnYXRlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIEVsZW1lbnQtbGVzcyB1c2FnZSwgaXQgZGVmYXVsdHMgdG8gZ2xvYmFsIGRlbGVnYXRpb25cbiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gVXNlIGBkb2N1bWVudGAgYXMgdGhlIGZpcnN0IHBhcmFtZXRlciwgdGhlbiBhcHBseSBhcmd1bWVudHNcbiAgICAgICAgLy8gVGhpcyBpcyBhIHNob3J0IHdheSB0byAudW5zaGlmdCBgYXJndW1lbnRzYCB3aXRob3V0IHJ1bm5pbmcgaW50byBkZW9wdGltaXphdGlvbnNcbiAgICAgICAgcmV0dXJuIF9kZWxlZ2F0ZS5iaW5kKG51bGwsIGRvY3VtZW50KS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBTZWxlY3Rvci1iYXNlZCB1c2FnZVxuICAgIGlmICh0eXBlb2YgZWxlbWVudHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIEFycmF5LWxpa2UgYmFzZWQgdXNhZ2VcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gX2RlbGVnYXRlKGVsZW1lbnQsIHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogRmluZHMgY2xvc2VzdCBtYXRjaCBhbmQgaW52b2tlcyBjYWxsYmFjay5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gbGlzdGVuZXIoZWxlbWVudCwgc2VsZWN0b3IsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5kZWxlZ2F0ZVRhcmdldCA9IGNsb3Nlc3QoZS50YXJnZXQsIHNlbGVjdG9yKTtcblxuICAgICAgICBpZiAoZS5kZWxlZ2F0ZVRhcmdldCkge1xuICAgICAgICAgICAgY2FsbGJhY2suY2FsbChlbGVtZW50LCBlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWxlZ2F0ZTtcbiIsInZhciBET0NVTUVOVF9OT0RFX1RZUEUgPSA5O1xuXG4vKipcbiAqIEEgcG9seWZpbGwgZm9yIEVsZW1lbnQubWF0Y2hlcygpXG4gKi9cbmlmICh0eXBlb2YgRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcbiAgICB2YXIgcHJvdG8gPSBFbGVtZW50LnByb3RvdHlwZTtcblxuICAgIHByb3RvLm1hdGNoZXMgPSBwcm90by5tYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG8ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICAgICAgICAgICAgICAgIHByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICAgICAgICAgICAgICAgIHByb3RvLm9NYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgICAgICAgICAgcHJvdG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBjbG9zZXN0IHBhcmVudCB0aGF0IG1hdGNoZXMgYSBzZWxlY3Rvci5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGNsb3Nlc3QgKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSAhPT0gRE9DVU1FTlRfTk9ERV9UWVBFKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZWxlbWVudC5tYXRjaGVzID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICBlbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvc2VzdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=