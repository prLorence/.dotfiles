{
    "gRPC .Net 5 - Creates csproj for the Client": {
        "prefix": "gRPC_client_csproj",
        "body": [
            "<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
            "",
            "\t<PropertyGroup>",
            "\t\t<TargetFramework>net5.0</TargetFramework>",
            "\t</PropertyGroup>",
            "",
            "\t<ItemGroup>",
            "\t\t<Protobuf Include=\"..\\Proto\\greet.proto\" GrpcServices=\"Client\" Link=\"Protos\\greet.proto\" />",
            "",
            "\t\t<PackageReference Include=\"Google.Protobuf\" Version=\"3.13.0\" />",
            "\t\t<PackageReference Include=\"Grpc.Net.Client\" Version=\"2.33.1\" />",
            "\t\t<PackageReference Include=\"Grpc.Tools\" Version=\"2.33.1\" PrivateAssets=\"All\" />",
            "\t</ItemGroup>",
            "",
            "</Project>"
        ],
        "description": "gRPC .NET 5 - Creates the csproj for the Client"
    },
    "gRPC .Net 5 - Creates the Program class for a simple Client": {
        "prefix": "gRPC_client_program",
        "body": [
            "using Greet;",
            "using Grpc.Net.Client;",
            "using System;",
            "using System.Threading.Tasks;",
            "",
            "namespace Client",
            "{",
            "\tpublic class Program",
            "\t{",
            "\t\tpublic static async Task Main(string[] args)",
            "\t\t{",
            "\t\t\ttry",
            "\t\t\t{",
            "\t\t\t\tusing var channel = GrpcChannel.ForAddress(\"http://localhost:5000\");",
            "\t\t\t\tvar client = new Greeter.GreeterClient(channel);",
            "",
            "\t\t\t\tvar reply = await client.SayHelloAsync(new HelloRequest { Name = \"GreeterClient\" });",
            "\t\t\t\tConsole.WriteLine(\"Greeting: \" + reply.Message);",
            "\t\t\t}",
            "\t\t\tcatch (Exception ex)",
            "\t\t\t{",
            "\t\t\t\tConsole.WriteLine($\"ERROR: {ex.Message}\");",
            "\t\t\t}",
            "",
            "\t\t\tConsole.WriteLine(\"Shutting down\");",
            "\t\t\tConsole.WriteLine(\"Press any key to exit...\");",
            "\t\t\tConsole.ReadKey();",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "gRPC .NET 5 - Creates the Program class for the Client"
    },
    "gRPC .Net 5 - Creates a Proto sample file for the App": {
        "prefix": "gRPC_proto",
        "body": [
            "// Create a Proto folder and keep there this greet.proto file",
            "syntax = \"proto3\";",
            "",
            "package greet;",
            "",
            "// Greeting service definition",
            "service Greeter {",
            "\t// Sends a greeting",
            "\trpc SayHello (HelloRequest) returns (HelloReply);",
            "}",
            "",
            "// The request message containing the user's name",
            "message HelloRequest {",
            "\tstring name = 1;",
            "}",
            "",
            "// The response message containing the greetings",
            "message HelloReply {",
            "\tstring message = 1;",
            "}"
        ],
        "description": "gRPC .NET 5 - Creates a Proto sample file for the App"
    },
    "gRPC .Net 5 - Creates csproj for the Server": {
        "prefix": "gRPC_server_csproj",
        "body": [
            "<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
            "",
            "\t<PropertyGroup>",
            "\t\t<TargetFramework>net5.0</TargetFramework>",
            "\t</PropertyGroup>",
            "",
            "\t<ItemGroup>",
            "\t\t<Protobuf Include=\"..\\Proto\\greet.proto\" GrpcServices=\"Server\" Link=\"Protos\\greet.proto\" />",
            "",
            "\t\t<PackageReference Include=\"Grpc.AspNetCore\" Version=\"2.33.1\" />",
            "\t</ItemGroup>",
            "",
            "</Project>"
        ],
        "description": "gRPC .NET 5 - Creates the csproj for the Server"
    },
    "gRPC .Net 5 - Creates the Program class for the Server": {
        "prefix": "gRPC_server_program",
        "body": [
            "using Microsoft.AspNetCore.Hosting;",
            "using Microsoft.Extensions.Hosting;",
            "",
            "namespace Server",
            "{",
            "\tpublic class Program",
            "\t{",
            "\t\tpublic static void Main(string[] args)",
            "\t\t{",
            "\t\t\tCreateHostBuilder(args).Build().Run();",
            "\t\t}",
            "",
            "\t\tpublic static IHostBuilder CreateHostBuilder(string[] args) =>",
            "\t\t\tHost.CreateDefaultBuilder(args)",
            "\t\t\t\t.ConfigureWebHostDefaults(webBuilder =>",
            "\t\t\t\t{",
            "\t\t\t\t\twebBuilder.UseStartup<Startup>();",
            "\t\t\t\t});",
            "\t}",
            "}"
        ],
        "description": "gRPC .NET 5 - Creates the Program class for the Server"
    },
    "gRPC .Net 5 - Creates the Service class for the Server": {
        "prefix": "gRPC_server_service",
        "body": [
            "using Greet;",
            "using Grpc.Core;",
            "using Microsoft.Extensions.Logging;",
            "using System.Threading.Tasks;",
            "",
            "namespace Server",
            "{",
            "\tpublic class GreeterService : Greeter.GreeterBase",
            "\t{",
            "\t\tprivate readonly ILogger _logger;",
            "",
            "\t\tpublic GreeterService(ILoggerFactory loggerFactory)",
            "\t\t{",
            "\t\t\t_logger = loggerFactory.CreateLogger<GreeterService>();",
            "\t\t}",
            "",
            "\t\tpublic override Task<HelloReply> SayHello(HelloRequest request, ServerCallContext context)",
            "\t\t{",
            "\t\t\t_logger.LogInformation($\"Sending hello to {request.Name}\");",
            "\t\t\treturn Task.FromResult(new HelloReply { Message = \"Hello \" + request.Name });",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "gRPC .NET 5 - Creates the Service class for the Server"
    },
    "gRPC .Net 5 - Creates the Settings (appsettings.json) content for the Server": {
        "prefix": "gRPC_server_settings",
        "body": [
            "{",
            "\t\"Logging\": {",
            "\t\t\"LogLevel\": {",
            "\t\t\t\"Default\": \"Information\"",
            "\t\t}",
            "\t},",
            "\t\"AllowedHosts\": \"*\",",
            "\t\"Kestrel\": {",
            "\t\t\"EndpointDefaults\": {",
            "\t\t\t\"Protocols\": \"Http2\"",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "gRPC .NET 5 - Creates the Settings (appsettings.json) content for the Server"
    },
    "gRPC .Net 5 - Creates the Startup class for the Server": {
        "prefix": "gRPC_server_startup",
        "body": [
            "using Microsoft.AspNetCore.Builder;",
            "using Microsoft.AspNetCore.Hosting;",
            "using Microsoft.Extensions.DependencyInjection;",
            "using Microsoft.Extensions.Hosting;",
            "",
            "namespace Server",
            "{",
            "\tpublic class Startup",
            "\t{",
            "\t\tpublic void ConfigureServices(IServiceCollection services)",
            "\t\t{",
            "\t\t\tservices.AddGrpc();",
            "\t\t}",
            "",
            "\t\tpublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)",
            "\t\t{",
            "\t\t\tif (env.IsDevelopment())",
            "\t\t\t{",
            "\t\t\t\tapp.UseDeveloperExceptionPage();",
            "\t\t\t}",
            "",
            "\t\t\tapp.UseRouting();",
            "",
            "\t\t\tapp.UseEndpoints(endpoints =>",
            "\t\t\t{",
            "\t\t\t\tendpoints.MapGrpcService<GreeterService>();",
            "\t\t\t});",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "gRPC .NET 5 - Creates the Startup class for the Server"
    },
    "Extension for get the MD5 value from a stream": {
        "prefix": "ex_md5_from_stream",
        "body": [
            "public static string GetMD5(this System.IO.Stream stream)",
            "{",
            "\tstream.Position = 0;",
            "\tvar arrayByteHashValue = new System.Security.Cryptography.MD5CryptoServiceProvider().ComputeHash(stream);",
            "\treturn BitConverter.ToString(arrayByteHashValue).Replace(\"-\", String.Empty).ToLower();",
            "}"
        ],
        "description": "Extension for get the MD5 value from a stream"
    },
    "Extension for convert a stream to string": {
        "prefix": "ex_stream_to_string",
        "body": [
            "public static string ToString(this System.IO.Stream stream)",
            "{",
            "\tstream.Position = 0;",
            "\treturn new System.IO.StreamReader(stream).ReadToEnd();",
            "}"
        ],
        "description": "Extension for convert a stream to string"
    },
    "Extension for convert a string to stream": {
        "prefix": "ex_string_to_stream",
        "body": [
            "public static System.IO.Stream ConvertToStream(this string source)",
            "{",
            "\tvar byteArray = System.Text.Encoding.UTF8.GetBytes(source);",
            "\treturn new System.IO.MemoryStream(byteArray);",
            "}"
        ],
        "description": "Extension for convert a string to stream"
    }
}
